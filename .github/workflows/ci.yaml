name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write

env:
  KUBERNETES_VERSION: "1.31"

jobs:
  basic-validation:
    name: Basic Validation (YAML & Security)
    runs-on: vollminlab
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install kubectl
        run: |
          echo "📦 Installing kubectl..."
          # Use apt-get for faster, more reliable installation
          curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
          echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
          sudo apt-get update
          sudo apt-get install -y kubectl
          kubectl version --client
        timeout-minutes: 5

      - name: Install yq
        run: |
          echo "📦 Installing yq for YAML validation..."
          sudo curl -L -o /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          yq --version

      - name: Install yamllint
        run: |
          echo "📦 Installing yamllint for YAML linting..."
          sudo apt-get update
          sudo apt-get install -y yamllint
          yamllint --version

      - name: Install kubeconform
        run: |
          echo "📦 Installing kubeconform for Kubernetes schema validation..."
          KUBECONFORM_VERSION="0.6.3"
          curl -L "https://github.com/yannh/kubeconform/releases/download/v${KUBECONFORM_VERSION}/kubeconform-linux-amd64.tar.gz" | tar -xz
          sudo mv kubeconform /usr/local/bin/
          kubeconform -v

      - name: Validate YAML syntax and linting
        run: |
          echo "🔍 Validating YAML syntax and linting..."
          
          # Create a lenient yamllint configuration
          cat > .yamllint << 'EOF'
          extends: default
          rules:
            document-start: disable
            line-length: disable
            new-line-at-end-of-file: disable
            trailing-spaces: disable
            indentation: disable
            empty-lines: disable
            comments: disable
            brackets: disable
            braces: disable
            colons: disable
            commas: disable
            hyphens: disable
            key-duplicates: disable
            key-ordering: disable
            octal-values: disable
            quoted-strings: disable
            truthy: disable
          EOF
          
          # Run yamllint on all YAML files with lenient config
          echo "Running yamllint with lenient configuration..."
          yamllint -c .yamllint clusters/ || {
            echo "❌ YAML linting failed"
            exit 1
          }
          
          # Validate all YAML files for syntax
          find clusters -name "*.yaml" -o -name "*.yml" | while read file; do
            # Skip kustomization files (build files, not Kubernetes resources)
            if [[ "$file" == *"kustomization.yaml" ]]; then
              echo "Skipping $file (Kustomization build file)"
              continue
            fi
            # Skip resources that require missing CRDs (temporary workaround)
            if [[ "$file" == *"flux-exception.yaml" ]]; then
              echo "Skipping $file (requires PolicyException CRD)"
              continue
            fi
            echo "Validating $file"
            kubectl apply --dry-run=client -f "$file" || {
              echo "❌ Invalid YAML syntax in $file"
              echo "Error details:"
              kubectl apply --dry-run=client -f "$file" 2>&1 || true
              exit 1
            }
          done
          echo "✅ All YAML files have valid syntax"

      - name: Validate Kubernetes schemas with kubeconform
        run: |
          echo "🔍 Validating Kubernetes schemas with kubeconform..."
          
          # Run kubeconform on all Kubernetes manifests
          find clusters -name "*.yaml" -o -name "*.yml" | while read file; do
            # Skip kustomization files, patch files, and non-Kubernetes files
            if [[ "$file" == *"kustomization.yaml" ]] || [[ "$file" == *"flux-exception.yaml" ]] || [[ "$file" == *"-patch.yaml" ]] || [[ "$file" == *"patch-"* ]]; then
              continue
            fi
            
            # Skip custom resources that kubeconform doesn't understand
            # Standard Kubernetes resources that kubeconform supports
            STANDARD_KINDS="Deployment|Service|ConfigMap|Secret|Ingress|PersistentVolume|PersistentVolumeClaim|Namespace|Pod|ReplicaSet|StatefulSet|DaemonSet|Job|CronJob|NetworkPolicy|Role|RoleBinding|ClusterRole|ClusterRoleBinding|ServiceAccount|LimitRange|ResourceQuota|HorizontalPodAutoscaler|PodDisruptionBudget|StorageClass|VolumeSnapshot|VolumeSnapshotClass|CSIDriver|CSINode|VolumeAttachment|PriorityClass|RuntimeClass|PodSecurityPolicy|ValidatingAdmissionWebhook|MutatingAdmissionWebhook|ControllerRevision|Lease|EndpointSlice|FlowSchema|PriorityLevelConfiguration|IngressClass|NetworkPolicy|PodSecurityPolicy"
            
            # Check if the file contains only standard Kubernetes resources
            if grep -q "kind:" "$file"; then
              # Get all resource kinds in the file
              FILE_KINDS=$(grep "kind:" "$file" | sed 's/.*kind: *//' | sort -u)
              
              # Check if any kind is not in the standard list
              CUSTOM_RESOURCE=false
              for kind in $FILE_KINDS; do
                if ! echo "$STANDARD_KINDS" | grep -q "\b$kind\b"; then
                  CUSTOM_RESOURCE=true
                  break
                fi
              done
              
              if [[ "$CUSTOM_RESOURCE" == "true" ]]; then
                echo "Skipping $file (contains custom resources - not supported by kubeconform)"
                continue
              fi
            fi
            
            # Check if file contains Kubernetes resources
            if grep -q "kind:" "$file" && grep -q "apiVersion:" "$file"; then
              echo "Validating schema for $file"
              kubeconform -strict -summary "$file" || {
                echo "❌ Schema validation failed for $file"
                exit 1
              }
            fi
          done
          echo "✅ All Kubernetes manifests have valid schemas"

      - name: Validate Kustomizations
        run: |
          echo "🔍 Validating Kustomizations..."
          KUSTOMIZATION_COUNT=0
          for file in $(find clusters -name "kustomization.yaml"); do
            echo "Validating Kustomization: $file"
            kubectl kustomize "$(dirname "$file")" >/dev/null 2>&1 || {
              echo "❌ Failed to validate Kustomization: $file"
              exit 1
            }
            KUSTOMIZATION_COUNT=$((KUSTOMIZATION_COUNT + 1))
          done
          echo "✅ Validated $KUSTOMIZATION_COUNT Kustomizations"

      - name: Install gitleaks
        run: |
          echo "📦 Installing gitleaks for secrets scanning..."
          GITLEAKS_VERSION="8.18.0"
          curl -L "https://github.com/gitleaks/gitleaks/releases/download/v${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz" | tar -xz
          sudo mv gitleaks /usr/local/bin/
          gitleaks version

      - name: Scan for secrets with gitleaks
        run: |
          echo "🔍 Scanning for secrets with gitleaks..."
          gitleaks detect --source . --verbose || {
            echo "❌ Secrets detected in repository"
            echo "Please review the findings above and remove any hardcoded secrets"
            exit 1
          }
          echo "✅ No secrets detected"

      - name: Check for common issues
        run: |
          echo "🔍 Checking for common issues..."
          
          # Additional check for hardcoded secrets in YAML files (backup to gitleaks)
          for file in $(find clusters -name "*.yaml" -o -name "*.yml" | xargs grep -l "password\s*:"); do
            # Skip if it's a SealedSecret or legitimate reference
            if grep -q "kind: SealedSecret\|encryptedData:" "$file"; then
              echo "Skipping $file (SealedSecret)"
              continue
            fi
            # Check for actual hardcoded secrets (not in SealedSecret context)
            if grep "password\s*:\s*[a-zA-Z0-9]" "$file" | grep -v "encryptedData:\|spec:"; then
              echo "❌ Found potential hardcoded secrets in $file"
              exit 1
            fi
          done
          
          # Check for consistent labels in Flux CD resources using yq
          echo "🔍 Validating metadata consistency..."
          for file in $(find clusters -name "*.yaml" -exec grep -l "kind: HelmRelease\|kind: OCIRepository\|kind: HelmRepository" {} \;); do
            # Check if required labels exist using yq
            if ! yq eval '.metadata.labels.app' "$file" >/dev/null 2>&1 || \
               ! yq eval '.metadata.labels.env' "$file" | grep -q "production" || \
               ! yq eval '.metadata.labels.category' "$file" >/dev/null 2>&1; then
              echo "❌ Missing required labels in Flux CD resource: $file"
              echo "Required labels: app, env: production, category"
              echo "Current labels:"
              yq eval '.metadata.labels' "$file" 2>/dev/null || echo "No labels found"
              exit 1
            fi
          done
          
          echo "✅ No hardcoded secrets found and metadata is consistent"

  security-scan:
    name: Security Scan
    runs-on: vollminlab
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.4.0
        timeout-minutes: 3
        continue-on-error: true
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && !cancelled()
        timeout-minutes: 1
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Display Trivy results if upload fails
        if: failure()
        run: |
          echo "⚠️ SARIF upload failed, but Trivy scan completed successfully"
          echo "📊 Security scan results are still valuable for local review"
          echo "🔍 Check the Trivy output above for security findings"

  server-side-validation:
    name: Server-Side Validation with Temporary Namespace
    runs-on: vollminlab
    needs: [basic-validation]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install kubectl
        run: |
          echo "📦 Installing kubectl..."
          # Use apt-get for faster, more reliable installation
          curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
          echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
          sudo apt-get update
          sudo apt-get install -y kubectl
          kubectl version --client
        timeout-minutes: 5

      - name: Setup Flux CLI
        run: |
          curl -s https://fluxcd.io/install.sh | sudo bash

      - name: Preflight check for Flux CRDs
        run: |
          echo "🔍 Checking for required Flux CRDs..."
          
          # Check if Flux CRDs are available
          if ! kubectl get crd ocirepositories.source.toolkit.fluxcd.io >/dev/null 2>&1; then
            echo "❌ OCIRepository CRD not found"
            echo "Please ensure Flux is installed in the cluster"
            exit 1
          fi
          
          if ! kubectl get crd helmreleases.helm.toolkit.fluxcd.io >/dev/null 2>&1; then
            echo "❌ HelmRelease CRD not found"
            echo "Please ensure Flux is installed in the cluster"
            exit 1
          fi
          
          echo "✅ Required Flux CRDs are available"

      - name: Create temporary testing namespace
        run: |
          echo "🧪 Creating temporary testing namespace..."
          TEST_NAMESPACE="ci-test-$(date +%s)-${GITHUB_RUN_ID:-$(whoami)}"
          echo "TEST_NAMESPACE=$TEST_NAMESPACE" >> $GITHUB_ENV
          kubectl create namespace "$TEST_NAMESPACE"
          echo "✅ Created namespace: $TEST_NAMESPACE"

      - name: Identify changed resources
        run: |
            echo "🔍 Identifying changed resources for validation..."
            
            # Get list of changed files in this PR/push
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "📋 Pull request detected - checking changed files"
              # For PRs, try to get the base SHA, but fall back to a safe approach
              BASE_SHA="${{ github.event.pull_request.base.sha }}"
              if [[ -n "$BASE_SHA" ]]; then
                # Try to use the base SHA if it exists in our history
                if git cat-file -e "$BASE_SHA" 2>/dev/null; then
                  CHANGED_FILES=$(git diff --name-only "$BASE_SHA" HEAD)
                else
                  echo "⚠️ Base SHA not found in history, using alternative approach"
                  # Fall back to comparing with the merge base using a different approach
                  # Try to find the merge base between the current branch and the target branch
                  MERGE_BASE=$(git merge-base HEAD ${{ github.event.pull_request.base.ref }} 2>/dev/null || echo "")
                  if [[ -n "$MERGE_BASE" ]]; then
                    CHANGED_FILES=$(git diff --name-only "$MERGE_BASE" HEAD)
                  else
                    echo "⚠️ Could not find merge base, using all files in current commit"
                    # Last resort: get all files in the current commit
                    CHANGED_FILES=$(git diff --name-only --cached HEAD)
                  fi
                fi
              else
                echo "⚠️ No base SHA available, using alternative approach"
                # Try to find the merge base between the current branch and the target branch
                MERGE_BASE=$(git merge-base HEAD ${{ github.event.pull_request.base.ref }} 2>/dev/null || echo "")
                if [[ -n "$MERGE_BASE" ]]; then
                  CHANGED_FILES=$(git diff --name-only "$MERGE_BASE" HEAD)
                else
                  echo "⚠️ Could not find merge base, using all files in current commit"
                  # Last resort: get all files in the current commit
                  CHANGED_FILES=$(git diff --name-only --cached HEAD)
                fi
              fi
            else
              echo "📋 Push detected - checking recent changes"
              # For pushes, use the previous commit
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            fi
            
            echo "Changed files:"
            echo "$CHANGED_FILES"
            
            # Find services that need validation (service-level detection)
            CHANGED_SERVICES=""
            if [[ -n "$CHANGED_FILES" ]]; then
              # For each changed file, find the service it belongs to
              for file in $CHANGED_FILES; do
                # Extract service path (e.g., mediastack/tautulli from mediastack/tautulli/app/helmrelease.yaml)
                if [[ "$file" =~ ^clusters/[^/]+/([^/]+/[^/]+)/ ]]; then
                  SERVICE_PATH="clusters/vollminlab-cluster/${BASH_REMATCH[1]}"
                  if [[ ! " $CHANGED_SERVICES " =~ " $SERVICE_PATH " ]]; then
                    CHANGED_SERVICES="$CHANGED_SERVICES $SERVICE_PATH"
                  fi
                fi
              done
            fi
            
            # Find OCI repositories that need validation
            CHANGED_OCI_REPOS=""
            if [[ -n "$CHANGED_FILES" ]]; then
              for file in $(echo "$CHANGED_FILES" | grep -E ".*helmrepository\.yaml$"); do
                if [[ -f "$file" ]] && grep -q "kind: OCIRepository" "$file"; then
                  CHANGED_OCI_REPOS="$CHANGED_OCI_REPOS $file"
                fi
              done
            fi
            
            # Find HelmReleases that need validation (from changed services)
            CHANGED_HELMRELEASES=""
            if [[ -n "$CHANGED_SERVICES" ]]; then
              for service in $CHANGED_SERVICES; do
                if [[ -d "$service" ]]; then
                  # Find all helmrelease.yaml files in this service
                  for helmrelease in $(find "$service" -name "helmrelease.yaml" 2>/dev/null); do
                    if [[ -f "$helmrelease" ]]; then
                      CHANGED_HELMRELEASES="$CHANGED_HELMRELEASES $helmrelease"
                    fi
                  done
                fi
              done
            fi
            
            # If no specific changes detected, exit gracefully instead of validating everything
            if [[ -z "$CHANGED_OCI_REPOS" && -z "$CHANGED_HELMRELEASES" ]]; then
              echo "✅ No specific OCI repos or HelmReleases changed - skipping validation"
              echo "CHANGED_OCI_REPOS=''" >> $GITHUB_ENV
              echo "CHANGED_HELMRELEASES=''" >> $GITHUB_ENV
              exit 0
            fi
            
            echo "Changed services: $CHANGED_SERVICES"
            echo "OCI repositories to validate: $CHANGED_OCI_REPOS"
            echo "HelmReleases to validate: $CHANGED_HELMRELEASES"
            
            # Export for next steps (use printf to avoid issues with special characters)
            printf "CHANGED_OCI_REPOS=%s\n" "$CHANGED_OCI_REPOS" >> $GITHUB_ENV
            printf "CHANGED_HELMRELEASES=%s\n" "$CHANGED_HELMRELEASES" >> $GITHUB_ENV

      - name: Deploy and validate changed OCI repositories
        run: |
          echo "🔍 Deploying and validating changed OCI repositories..."
          TEST_NAMESPACE="$TEST_NAMESPACE"
          
          if [[ -z "$CHANGED_OCI_REPOS" ]]; then
            echo "✅ No OCI repositories to validate"
            exit 0
          fi
          
          # Deploy only changed OCI repositories to test namespace
          for file in $CHANGED_OCI_REPOS; do
            echo "Deploying OCIRepository: $file"
            
            # Create a modified version for the test namespace using yq
            yq eval "
              .metadata.namespace = \"$TEST_NAMESPACE\" |
              .metadata.name = \"test-$(basename "$file" .yaml)-$(date +%s)\"
            " "$file" | kubectl apply -f - || {
              echo "❌ Failed to deploy OCIRepository: $file"
              exit 1
            }
          done
          
          # Wait for OCI repositories to sync (this validates if versions exist)
          echo "⏳ Waiting for OCI repositories to sync..."
          kubectl wait --for=condition=Ready --timeout=300s ocirepositories.source.toolkit.fluxcd.io --all -n "$TEST_NAMESPACE" || {
            echo "❌ OCI repositories failed to sync"
            echo "This indicates that chart versions may not exist or repositories are inaccessible"
            
            # Show detailed status
            echo "OCI Repository Status:"
            kubectl get ocirepository -n "$TEST_NAMESPACE" -o wide
            echo ""
            echo "OCI Repository Details:"
            for repo in $(kubectl get ocirepository -n "$TEST_NAMESPACE" -o name); do
              echo "--- $repo ---"
              kubectl describe "$repo" -n "$TEST_NAMESPACE" | tail -20
            done
            exit 1
          }
          
          echo "✅ Changed OCI repositories synced successfully"

      - name: Deploy and validate changed HelmReleases
        run: |
          echo "🔍 Deploying and validating changed HelmReleases..."
          TEST_NAMESPACE="$TEST_NAMESPACE"
          
          if [[ -z "$CHANGED_HELMRELEASES" ]]; then
            echo "✅ No HelmReleases to validate"
            exit 0
          fi
          
          # Deploy only changed HelmReleases to test namespace
          for file in $CHANGED_HELMRELEASES; do
            echo "Deploying HelmRelease: $file"
            
            # Create a modified version for the test namespace using yq
            yq eval "
              .metadata.namespace = \"$TEST_NAMESPACE\" |
              .metadata.name = \"test-$(basename "$(dirname "$file")")-$(date +%s)\" |
              .spec.chart.spec.sourceRef.name = \"test-$(basename "$(dirname "$file")")-helmrepository-$(date +%s)\"
            " "$file" | kubectl apply -f - || {
              echo "❌ Failed to deploy HelmRelease: $file"
              exit 1
            }
          done
          
          # Wait for HelmReleases to be ready (this validates if charts can be deployed)
          echo "⏳ Waiting for HelmReleases to be ready..."
          kubectl wait --for=condition=Ready --timeout=600s helmreleases.helm.toolkit.fluxcd.io --all -n "$TEST_NAMESPACE" || {
            echo "❌ HelmReleases failed to become ready"
            echo "This indicates that chart deployments are failing"
            
            # Show detailed status
            echo "HelmRelease Status:"
            kubectl get helmrelease -n "$TEST_NAMESPACE" -o wide
            echo ""
            echo "HelmRelease Details:"
            for hr in $(kubectl get helmrelease -n "$TEST_NAMESPACE" -o name); do
              echo "--- $hr ---"
              kubectl describe "$hr" -n "$TEST_NAMESPACE" | tail -20
            done
            exit 1
          }
          
          echo "✅ Changed HelmReleases are ready"

      - name: Validate deployments are working
        run: |
          echo "🔍 Validating that deployments are actually working..."
          TEST_NAMESPACE="$TEST_NAMESPACE"
          
          # Only wait for deployments if we have HelmReleases
          if [[ -z "$CHANGED_HELMRELEASES" ]]; then
            echo "✅ No HelmReleases to validate deployments for"
            exit 0
          fi
          
          # Wait for deployments to be ready
          echo "⏳ Waiting for deployments to be ready..."
          kubectl wait --for=condition=available --timeout=300s deployment --all -n "$TEST_NAMESPACE" || {
            echo "❌ Some deployments failed to become available"
            echo "Deployment Status:"
            kubectl get deployments -n "$TEST_NAMESPACE"
            echo ""
            echo "Pod Status:"
            kubectl get pods -n "$TEST_NAMESPACE"
            echo ""
            echo "Pod Details (failed pods):"
            for pod in $(kubectl get pods -n "$TEST_NAMESPACE" --field-selector=status.phase!=Running -o name); do
              echo "--- $pod ---"
              kubectl describe "$pod" -n "$TEST_NAMESPACE" | tail -20
            done
            exit 1
          }
          
          # Check that all pods are running
          FAILED_PODS=$(kubectl get pods -n "$TEST_NAMESPACE" --field-selector=status.phase!=Running --no-headers | wc -l)
          if [[ "$FAILED_PODS" -gt 0 ]]; then
            echo "❌ Found $FAILED_PODS pods that are not running"
            kubectl get pods -n "$TEST_NAMESPACE"
            exit 1
          fi
          
          echo "✅ Changed deployments are running successfully"

      - name: Cleanup temporary namespace
        if: always()
        run: |
          echo "🧹 Cleaning up temporary namespace..."
          TEST_NAMESPACE="$TEST_NAMESPACE"
          if [[ -n "$TEST_NAMESPACE" ]]; then
            kubectl delete namespace "$TEST_NAMESPACE" --ignore-not-found=true
            echo "✅ Cleaned up namespace: $TEST_NAMESPACE"
          fi

  policy-validation:
    name: Kyverno Policy Validation & Compliance
    runs-on: vollminlab
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install kubectl
        run: |
          echo "📦 Installing kubectl..."
          # Use apt-get for faster, more reliable installation
          curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
          echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
          sudo apt-get update
          sudo apt-get install -y kubectl
          kubectl version --client
        timeout-minutes: 5

      - name: Install yq
        run: |
          echo "📦 Installing yq for YAML processing..."
          sudo curl -L -o /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          yq --version

      - name: Setup Kyverno CLI
        run: |
          # Install Kyverno CLI using GitHub releases
          echo "📦 Installing Kyverno CLI..."
          KYVERNO_VERSION=$(curl -s https://api.github.com/repos/kyverno/kyverno/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          echo "Installing Kyverno CLI version: $KYVERNO_VERSION"
          curl -L "https://github.com/kyverno/kyverno/releases/download/${KYVERNO_VERSION}/kyverno-cli_${KYVERNO_VERSION}_linux_x86_64.tar.gz" | tar -xz
          sudo mv kyverno /usr/local/bin/
          kyverno version

      - name: Validate Kyverno policy syntax
        run: |
          echo "🔍 Validating Kyverno policy syntax..."
          POLICY_COUNT=0
          for file in $(find clusters -name "*.yaml" -path "*/kyverno/*"); do
            # Skip PolicyException files as they require Kyverno operator to be installed
            if [[ "$file" == *"flux-exception.yaml" ]]; then
              echo "Skipping $file (PolicyException requires Kyverno operator)"
              continue
            fi
            if grep -q "kind: Policy\|kind: ClusterPolicy" "$file"; then
              echo "Validating Kyverno policy syntax: $file"
              kubectl apply --dry-run=client -f "$file" || {
                echo "❌ Failed to validate Kyverno policy: $file"
                echo "Error details:"
                kubectl apply --dry-run=client -f "$file" 2>&1 || true
                exit 1
              }
              POLICY_COUNT=$((POLICY_COUNT + 1))
            fi
          done
          echo "✅ Validated $POLICY_COUNT Kyverno policies"

      - name: Validate policy compliance
        run: |
          echo "🔍 Validating compliance with Kyverno policies..."
          
          # Create temporary directory for policy files
          mkdir -p /tmp/kyverno-policies
          
          # Extract all Kyverno policies to temporary directory
          POLICY_COUNT=0
          for file in $(find clusters -name "*.yaml" -path "*/kyverno/*"); do
            if grep -q "kind: Policy\|kind: ClusterPolicy" "$file"; then
              cp "$file" "/tmp/kyverno-policies/policy-${POLICY_COUNT}.yaml"
              POLICY_COUNT=$((POLICY_COUNT + 1))
            fi
          done
          
          if [[ "$POLICY_COUNT" -eq 0 ]]; then
            echo "⚠️ No Kyverno policies found to validate against"
            exit 0
          fi
          
          echo "Found $POLICY_COUNT Kyverno policies to validate against"
          
          # Validate all Kubernetes resources against Kyverno policies
          echo "🔍 Running policy compliance validation..."
          
          # Use kyverno CLI to validate all resources against all policies
          kyverno apply /tmp/kyverno-policies/ --resource clusters/ || {
            echo "❌ Policy compliance validation failed"
            echo "Some resources do not comply with Kyverno policies"
            echo ""
            echo "Common policy violations to check:"
            echo "- Missing required labels: app, env, category"
            echo "- Missing resource requests/limits"
            echo "- Using ':latest' image tags"
            echo "- Using privileged containers"
            echo "- Using hostPath volumes"
            echo ""
            echo "Please review the policy violations above and fix them"
            exit 1
          }
          
          echo "✅ All resources comply with Kyverno policies"
          
          # Cleanup
          rm -rf /tmp/kyverno-policies

  notify-success:
    name: Notify Success
    runs-on: vollminlab
    needs: [basic-validation, security-scan, server-side-validation, policy-validation]
    if: success()
    steps:
      - name: Success notification
        run: |
          echo "✅ All CI checks passed!"
          echo "🚀 Ready for deployment"
          echo "📊 Server-side validation confirmed all OCI repositories and HelmReleases work correctly"
          echo "🔒 Security scan completed without critical vulnerabilities"
          echo "📋 All YAML syntax and policy validations passed"

  notify-failure:
    name: Notify Failure
    runs-on: vollminlab
    needs: [basic-validation, security-scan, server-side-validation, policy-validation]
    if: failure()
    steps:
      - name: Failure notification
        run: |
          echo "❌ CI checks failed!"
          echo "🔧 Please review the failed steps above"
          echo "💡 Server-side validation provides detailed error information for debugging"
          echo "📊 Check the specific job outputs for detailed failure information"