name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  KUBERNETES_VERSION: "1.32.3"

jobs:
  validate-manifests:
    name: Validate Kubernetes Manifests
    runs-on: vollminlab
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install kubectl
        run: |
          echo "📦 Installing kubectl..."
          curl -LO "https://dl.k8s.io/release/v${{ env.KUBERNETES_VERSION }}/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      - name: Validate YAML syntax
        run: |
          echo "🔍 Validating YAML syntax..."
          # Use kubectl to validate YAML syntax for Kubernetes resources only
          find clusters -name "*.yaml" -o -name "*.yml" | while read file; do
            # Skip kustomization files (build files, not Kubernetes resources)
            if [[ "$file" == *"kustomization.yaml" ]]; then
              echo "Skipping $file (Kustomization build file)"
              continue
            fi
            # Skip resources that require missing CRDs (temporary workaround)
            if [[ "$file" == *"flux-exception.yaml" ]]; then
              echo "Skipping $file (requires PolicyException CRD)"
              continue
            fi
            echo "Validating $file"
            kubectl apply --dry-run=client -f "$file" || {
              echo "❌ Invalid YAML syntax in $file"
              echo "Error details:"
              kubectl apply --dry-run=client -f "$file" 2>&1 || true
              exit 1
            }
          done
          echo "✅ All YAML files have valid syntax"

      - name: Validate Kubernetes manifests
        run: |
          echo "🔍 Validating Kubernetes manifests..."
          find clusters -name "*.yaml" -o -name "*.yml" | while read file; do
            # Skip kustomization files (build files, not Kubernetes resources)
            if [[ "$file" == *"kustomization.yaml" ]]; then
              echo "Skipping $file (Kustomization build file)"
              continue
            fi
            # Skip resources that require missing CRDs (temporary workaround)
            if [[ "$file" == *"flux-exception.yaml" ]]; then
              echo "Skipping $file (requires PolicyException CRD)"
              continue
            fi
            echo "Validating $file"
            kubectl apply --dry-run=client -f "$file" || exit 1
          done

      - name: Check for common issues
        run: |
          echo "🔍 Checking for common issues..."
          
          # Check for hardcoded secrets
          if grep -r "password\|secret\|key" clusters/ --include="*.yaml" --include="*.yml" | grep -v "kind: Secret\|kind: SealedSecret\|#.*secret\|#.*password"; then
            echo "❌ Found potential hardcoded secrets"
            exit 1
          fi
          
          # Check for missing labels
          echo "✅ No hardcoded secrets found"

  security-scan:
    name: Security Scan
    runs-on: vollminlab
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  flux-validation:
    name: Flux Configuration Validation
    runs-on: vollminlab
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install kubectl
        run: |
          echo "📦 Installing kubectl..."
          curl -LO "https://dl.k8s.io/release/v${{ env.KUBERNETES_VERSION }}/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      - name: Setup Flux CLI
        run: |
          curl -s https://fluxcd.io/install.sh | sudo bash

      - name: Validate Flux configurations
        run: |
          echo "🔍 Validating Flux configurations..."
          
          # Check Kustomizations using kubectl kustomize
          KUSTOMIZATION_COUNT=0
          for file in $(find clusters -name "kustomization.yaml"); do
            echo "Validating Kustomization: $file"
            kubectl kustomize "$(dirname "$file")" >/dev/null 2>&1 || {
              echo "❌ Failed to validate Kustomization: $file"
              exit 1
            }
            KUSTOMIZATION_COUNT=$((KUSTOMIZATION_COUNT + 1))
          done
          echo "✅ Validated $KUSTOMIZATION_COUNT Kustomizations"
          
          # Check HelmReleases
          HELMRELEASE_COUNT=0
          for file in $(find clusters -name "helmrelease.yaml"); do
            echo "Validating HelmRelease: $file"
            kubectl apply --dry-run=client -f "$file" || {
              echo "❌ Failed to validate HelmRelease: $file"
              echo "Error details:"
              kubectl apply --dry-run=client -f "$file" 2>&1 || true
              exit 1
            }
            HELMRELEASE_COUNT=$((HELMRELEASE_COUNT + 1))
          done
          echo "✅ Validated $HELMRELEASE_COUNT HelmReleases"

  policy-validation:
    name: Kyverno Policy Validation
    runs-on: vollminlab
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install kubectl
        run: |
          echo "📦 Installing kubectl..."
          curl -LO "https://dl.k8s.io/release/v${{ env.KUBERNETES_VERSION }}/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      - name: Setup Kyverno CLI
        run: |
          # Install Kyverno CLI using GitHub releases
          echo "📦 Installing Kyverno CLI..."
          KYVERNO_VERSION=$(curl -s https://api.github.com/repos/kyverno/kyverno/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          echo "Installing Kyverno CLI version: $KYVERNO_VERSION"
          curl -L "https://github.com/kyverno/kyverno/releases/download/${KYVERNO_VERSION}/kyverno-cli_${KYVERNO_VERSION}_linux_x86_64.tar.gz" | tar -xz
          sudo mv kyverno /usr/local/bin/
          kyverno version

      - name: Validate Kyverno policies
        run: |
          echo "🔍 Validating Kyverno policies..."
          POLICY_COUNT=0
          for file in $(find clusters -name "*.yaml" -path "*/kyverno/*"); do
            # Skip PolicyException files as they require Kyverno operator to be installed
            if [[ "$file" == *"flux-exception.yaml" ]]; then
              echo "Skipping $file (PolicyException requires Kyverno operator)"
              continue
            fi
            if grep -q "kind: Policy\|kind: ClusterPolicy" "$file"; then
              echo "Validating Kyverno policy syntax: $file"
              kubectl apply --dry-run=client -f "$file" || {
                echo "❌ Failed to validate Kyverno policy: $file"
                echo "Error details:"
                kubectl apply --dry-run=client -f "$file" 2>&1 || true
                exit 1
              }
              POLICY_COUNT=$((POLICY_COUNT + 1))
            fi
          done
          echo "✅ Validated $POLICY_COUNT Kyverno policies"

  integration-test:
    name: Integration Test
    runs-on: vollminlab
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install kubectl
        run: |
          echo "📦 Installing kubectl..."
          curl -LO "https://dl.k8s.io/release/v${{ env.KUBERNETES_VERSION }}/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      - name: Test namespace creation
        run: |
          echo "🧪 Testing namespace creation..."
          kubectl create namespace ci-test --dry-run=client || exit 1
          echo "✅ Namespace creation validation passed"

      - name: Test resource validation
        run: |
          echo "🧪 Testing resource validation..."
          # Test a simple ConfigMap
          cat <<EOF | kubectl apply --dry-run=client -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: ci-test
            namespace: default
          data:
            test: "value"
          EOF

  notify-success:
    name: Notify Success
    runs-on: vollminlab
    needs: [validate-manifests, security-scan, flux-validation, policy-validation, integration-test]
    if: success()
    steps:
      - name: Success notification
        run: |
          echo "✅ All CI checks passed!"
          echo "🚀 Ready for deployment"

  notify-failure:
    name: Notify Failure
    runs-on: vollminlab
    needs: [validate-manifests, security-scan, flux-validation, policy-validation, integration-test]
    if: failure()
    steps:
      - name: Failure notification
        run: |
          echo "❌ CI checks failed!"
          echo "🔧 Please review the failed steps above"