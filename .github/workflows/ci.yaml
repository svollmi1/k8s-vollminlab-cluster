name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  KUBERNETES_VERSION: "1.32.3"

jobs:
  validate-manifests:
    name: Validate Kubernetes Manifests
    runs-on: vollminlab
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install kubectl
        run: |
          echo "📦 Installing kubectl..."
          curl -LO "https://dl.k8s.io/release/v${{ env.KUBERNETES_VERSION }}/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      - name: Validate YAML syntax
        run: |
          echo "🔍 Validating YAML syntax..."
          # Use kubectl to validate YAML syntax for Kubernetes resources only
          find clusters -name "*.yaml" -o -name "*.yml" | while read file; do
            # Skip kustomization files (build files, not Kubernetes resources)
            if [[ "$file" == *"kustomization.yaml" ]]; then
              echo "Skipping $file (Kustomization build file)"
              continue
            fi
            # Skip resources that require missing CRDs (temporary workaround)
            if [[ "$file" == *"flux-exception.yaml" ]]; then
              echo "Skipping $file (requires PolicyException CRD)"
              continue
            fi
            echo "Validating $file"
            kubectl apply --dry-run=client -f "$file" || {
              echo "❌ Invalid YAML syntax in $file"
              echo "Error details:"
              kubectl apply --dry-run=client -f "$file" 2>&1 || true
              exit 1
            }
          done
          echo "✅ All YAML files have valid syntax"

      - name: Validate Kubernetes manifests
        run: |
          echo "🔍 Validating Kubernetes manifests..."
          find clusters -name "*.yaml" -o -name "*.yml" | while read file; do
            # Skip kustomization files (build files, not Kubernetes resources)
            if [[ "$file" == *"kustomization.yaml" ]]; then
              echo "Skipping $file (Kustomization build file)"
              continue
            fi
            # Skip resources that require missing CRDs (temporary workaround)
            if [[ "$file" == *"flux-exception.yaml" ]]; then
              echo "Skipping $file (requires PolicyException CRD)"
              continue
            fi
            echo "Validating $file"
            kubectl apply --dry-run=client -f "$file" || exit 1
          done

      - name: Check for common issues
        run: |
          echo "🔍 Checking for common issues..."
          
          # Check for hardcoded secrets (exclude SealedSecrets and legitimate references)
          # First, find files with password fields
          for file in $(find clusters -name "*.yaml" -o -name "*.yml" | xargs grep -l "password\s*:"); do
            # Skip if it's a SealedSecret or legitimate reference
            if grep -q "kind: SealedSecret\|encryptedData:" "$file"; then
              echo "Skipping $file (SealedSecret)"
              continue
            fi
            # Check for actual hardcoded secrets (not in SealedSecret context)
            if grep "password\s*:\s*[a-zA-Z0-9]" "$file" | grep -v "encryptedData:\|spec:"; then
              echo "❌ Found potential hardcoded secrets in $file"
              exit 1
            fi
          done
          
          # Check for missing labels
          echo "✅ No hardcoded secrets found"

  security-scan:
    name: Security Scan
    runs-on: vollminlab
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        timeout-minutes: 3
        continue-on-error: true
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && !cancelled()
        timeout-minutes: 1
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Display Trivy results if upload fails
        if: failure()
        run: |
          echo "⚠️ SARIF upload failed, but Trivy scan completed successfully"
          echo "📊 Security scan results are still valuable for local review"
          echo "🔍 Check the Trivy output above for security findings"

  flux-validation:
    name: Flux Configuration Validation
    runs-on: vollminlab
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install kubectl
        run: |
          echo "📦 Installing kubectl..."
          curl -LO "https://dl.k8s.io/release/v${{ env.KUBERNETES_VERSION }}/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      - name: Setup Flux CLI
        run: |
          curl -s https://fluxcd.io/install.sh | sudo bash

      - name: Validate Flux configurations
        run: |
          echo "🔍 Validating Flux configurations..."
          
          # Check Kustomizations using kubectl kustomize
          KUSTOMIZATION_COUNT=0
          for file in $(find clusters -name "kustomization.yaml"); do
            echo "Validating Kustomization: $file"
            kubectl kustomize "$(dirname "$file")" >/dev/null 2>&1 || {
              echo "❌ Failed to validate Kustomization: $file"
              exit 1
            }
            KUSTOMIZATION_COUNT=$((KUSTOMIZATION_COUNT + 1))
          done
          echo "✅ Validated $KUSTOMIZATION_COUNT Kustomizations"
          
          # Check HelmReleases
          HELMRELEASE_COUNT=0
          for file in $(find clusters -name "helmrelease.yaml"); do
            echo "Validating HelmRelease: $file"
            kubectl apply --dry-run=client -f "$file" || {
              echo "❌ Failed to validate HelmRelease: $file"
              echo "Error details:"
              kubectl apply --dry-run=client -f "$file" 2>&1 || true
              exit 1
            }
            HELMRELEASE_COUNT=$((HELMRELEASE_COUNT + 1))
          done
          echo "✅ Validated $HELMRELEASE_COUNT HelmReleases"
          
          # Check all Flux CD Repository types
          REPO_COUNT=0
          for file in $(find clusters -name "*helmrepository.yaml"); do
            if grep -q "kind: OCIRepository" "$file"; then
              echo "Validating OCIRepository: $file"
            else
              echo "Validating HelmRepository: $file"
            fi
            kubectl apply --dry-run=client -f "$file" || {
              echo "❌ Failed to validate repository: $file"
              echo "Error details:"
              kubectl apply --dry-run=client -f "$file" 2>&1 || true
              exit 1
            }
            REPO_COUNT=$((REPO_COUNT + 1))
          done
          echo "✅ Validated $REPO_COUNT Repository manifests"
          
          # Check Flux CD Kustomizations
          FLUX_KUSTOMIZATION_COUNT=0
          for file in $(find clusters -name "*-kustomization.yaml"); do
            echo "Validating Flux Kustomization: $file"
            kubectl apply --dry-run=client -f "$file" || {
              echo "❌ Failed to validate Flux Kustomization: $file"
              echo "Error details:"
              kubectl apply --dry-run=client -f "$file" 2>&1 || true
              exit 1
            }
            FLUX_KUSTOMIZATION_COUNT=$((FLUX_KUSTOMIZATION_COUNT + 1))
          done
          echo "✅ Validated $FLUX_KUSTOMIZATION_COUNT Flux Kustomizations"
          
          # Check SealedSecrets
          SEALEDSECRET_COUNT=0
          for file in $(find clusters -name "*sealedsecret*.yaml"); do
            echo "Validating SealedSecret: $file"
            kubectl apply --dry-run=client -f "$file" || {
              echo "❌ Failed to validate SealedSecret: $file"
              echo "Error details:"
              kubectl apply --dry-run=client -f "$file" 2>&1 || true
              exit 1
            }
            SEALEDSECRET_COUNT=$((SEALEDSECRET_COUNT + 1))
          done
          echo "✅ Validated $SEALEDSECRET_COUNT SealedSecrets"
          
          # Check GitRepositories
          GITREPO_COUNT=0
          for file in $(find clusters -name "*.yaml" -exec grep -l "kind: GitRepository" {} \;); do
            echo "Validating GitRepository: $file"
            kubectl apply --dry-run=client -f "$file" || {
              echo "❌ Failed to validate GitRepository: $file"
              echo "Error details:"
              kubectl apply --dry-run=client -f "$file" 2>&1 || true
              exit 1
            }
            GITREPO_COUNT=$((GITREPO_COUNT + 1))
          done
          echo "✅ Validated $GITREPO_COUNT GitRepositories"
          
          # Check RunnerDeployments (Actions Runner Controller)
          RUNNERDEPLOYMENT_COUNT=0
          for file in $(find clusters -name "*.yaml" -exec grep -l "kind: RunnerDeployment" {} \;); do
            echo "Validating RunnerDeployment: $file"
            kubectl apply --dry-run=client -f "$file" || {
              echo "❌ Failed to validate RunnerDeployment: $file"
              echo "Error details:"
              kubectl apply --dry-run=client -f "$file" 2>&1 || true
              exit 1
            }
            RUNNERDEPLOYMENT_COUNT=$((RUNNERDEPLOYMENT_COUNT + 1))
          done
          echo "✅ Validated $RUNNERDEPLOYMENT_COUNT RunnerDeployments"
          
          # Check Kyverno Policies (YAML syntax validation only due to CI permissions)
          KYVERNO_POLICY_COUNT=0
          for file in $(find clusters -name "*.yaml" -exec grep -l "kind: ClusterPolicy\|kind: PolicyException" {} \;); do
            echo "Validating Kyverno Policy YAML syntax: $file"
            # Use client-side validation only (no server permissions required)
            kubectl apply --dry-run=client -f "$file" || {
              echo "❌ Failed to validate Kyverno Policy YAML syntax: $file"
              echo "Error details:"
              kubectl apply --dry-run=client -f "$file" 2>&1 || true
              exit 1
            }
            KYVERNO_POLICY_COUNT=$((KYVERNO_POLICY_COUNT + 1))
          done
          echo "✅ Validated $KYVERNO_POLICY_COUNT Kyverno Policies (YAML syntax)"
          
          # Check Kubernetes native resources
          NATIVE_RESOURCE_COUNT=0
          for file in $(find clusters -name "*.yaml" -exec grep -l "kind: ConfigMap\|kind: Ingress\|kind: PersistentVolumeClaim\|kind: ServiceAccount\|kind: ClusterRole\|kind: ClusterRoleBinding" {} \;); do
            echo "Validating Kubernetes native resource: $file"
            kubectl apply --dry-run=client -f "$file" || {
              echo "❌ Failed to validate Kubernetes resource: $file"
              echo "Error details:"
              kubectl apply --dry-run=client -f "$file" 2>&1 || true
              exit 1
            }
            NATIVE_RESOURCE_COUNT=$((NATIVE_RESOURCE_COUNT + 1))
          done
          echo "✅ Validated $NATIVE_RESOURCE_COUNT Kubernetes native resources"
          
          # Validate metadata consistency
          echo "🔍 Validating metadata consistency..."
          
          # Check for consistent labels in Flux CD resources
          for file in $(find clusters -name "*.yaml" -exec grep -l "kind: HelmRelease\|kind: OCIRepository\|kind: HelmRepository" {} \;); do
            if ! grep -q "app:" "$file" || ! grep -q "env: production" "$file" || ! grep -q "category:" "$file"; then
              echo "❌ Missing required labels in Flux CD resource: $file"
              echo "Required labels: app, env: production, category"
              exit 1
            fi
          done
          
          # Check for consistent namespace usage
          echo "🔍 Validating namespace consistency..."
          for file in $(find clusters -name "*.yaml" -exec grep -l "kind: HelmRelease" {} \;); do
            namespace=$(grep "namespace:" "$file" | head -1 | awk '{print $2}')
            app_name=$(grep "name:" "$file" | head -1 | awk '{print $2}')
            if [[ "$namespace" != "$app_name" ]]; then
              echo "⚠️  Namespace mismatch in HelmRelease: $file (namespace: $namespace, name: $app_name)"
              echo "Consider if this is intentional"
            fi
          done
          
          # Check for consistent storage class usage
          echo "🔍 Validating storage class consistency..."
          for file in $(find clusters -name "*pvc*.yaml"); do
            if ! grep -q "storageClassName: smb" "$file"; then
              echo "⚠️  PVC not using SMB storage class: $file"
              echo "Consider using 'storageClassName: smb' for consistency"
            fi
          done
          
          echo "✅ Metadata consistency validation completed"

  policy-validation:
    name: Kyverno Policy Validation
    runs-on: vollminlab
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install kubectl
        run: |
          echo "📦 Installing kubectl..."
          curl -LO "https://dl.k8s.io/release/v${{ env.KUBERNETES_VERSION }}/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      - name: Setup Kyverno CLI
        run: |
          # Install Kyverno CLI using GitHub releases
          echo "📦 Installing Kyverno CLI..."
          KYVERNO_VERSION=$(curl -s https://api.github.com/repos/kyverno/kyverno/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          echo "Installing Kyverno CLI version: $KYVERNO_VERSION"
          curl -L "https://github.com/kyverno/kyverno/releases/download/${KYVERNO_VERSION}/kyverno-cli_${KYVERNO_VERSION}_linux_x86_64.tar.gz" | tar -xz
          sudo mv kyverno /usr/local/bin/
          kyverno version

      - name: Validate Kyverno policies
        run: |
          echo "🔍 Validating Kyverno policies..."
          POLICY_COUNT=0
          for file in $(find clusters -name "*.yaml" -path "*/kyverno/*"); do
            # Skip PolicyException files as they require Kyverno operator to be installed
            if [[ "$file" == *"flux-exception.yaml" ]]; then
              echo "Skipping $file (PolicyException requires Kyverno operator)"
              continue
            fi
            if grep -q "kind: Policy\|kind: ClusterPolicy" "$file"; then
              echo "Validating Kyverno policy syntax: $file"
              kubectl apply --dry-run=client -f "$file" || {
                echo "❌ Failed to validate Kyverno policy: $file"
                echo "Error details:"
                kubectl apply --dry-run=client -f "$file" 2>&1 || true
                exit 1
              }
              POLICY_COUNT=$((POLICY_COUNT + 1))
            fi
          done
          echo "✅ Validated $POLICY_COUNT Kyverno policies"

  integration-test:
    name: Integration Test
    runs-on: vollminlab
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install kubectl
        run: |
          echo "📦 Installing kubectl..."
          curl -LO "https://dl.k8s.io/release/v${{ env.KUBERNETES_VERSION }}/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      - name: Test namespace creation
        run: |
          echo "🧪 Testing namespace creation..."
          kubectl create namespace ci-test --dry-run=client || exit 1
          echo "✅ Namespace creation validation passed"

      - name: Test resource validation
        run: |
          echo "🧪 Testing resource validation..."
          # Test a simple ConfigMap
          cat <<EOF | kubectl apply --dry-run=client -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: ci-test
            namespace: default
          data:
            test: "value"
          EOF

  notify-success:
    name: Notify Success
    runs-on: vollminlab
    needs: [validate-manifests, security-scan, flux-validation, policy-validation, integration-test]
    if: success()
    steps:
      - name: Success notification
        run: |
          echo "✅ All CI checks passed!"
          echo "🚀 Ready for deployment"

  notify-failure:
    name: Notify Failure
    runs-on: vollminlab
    needs: [validate-manifests, security-scan, flux-validation, policy-validation, integration-test]
    if: failure()
    steps:
      - name: Failure notification
        run: |
          echo "❌ CI checks failed!"
          echo "🔧 Please review the failed steps above"