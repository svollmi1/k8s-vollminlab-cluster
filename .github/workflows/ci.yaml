name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  KUBERNETES_VERSION: "1.32.3"

jobs:
  validate-manifests:
    name: Validate Kubernetes Manifests
    runs-on: vollminlab
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install kubectl
        run: |
          echo "üì¶ Installing kubectl..."
          curl -LO "https://dl.k8s.io/release/v${{ env.KUBERNETES_VERSION }}/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      - name: Validate YAML syntax
        run: |
          echo "üîç Validating YAML syntax..."
          # Install PyYAML if not available
          python3 -c "import yaml" 2>/dev/null || pip3 install PyYAML
          find clusters -name "*.yaml" -o -name "*.yml" | while read file; do
            echo "Validating $file"
            python3 -c "import yaml; yaml.safe_load(open('$file'))" || exit 1
          done

      - name: Validate Kubernetes manifests
        run: |
          echo "üîç Validating Kubernetes manifests..."
          find clusters -name "*.yaml" -o -name "*.yml" | while read file; do
            echo "Validating $file"
            kubectl apply --dry-run=client -f "$file" || exit 1
          done

      - name: Check for common issues
        run: |
          echo "üîç Checking for common issues..."
          
          # Check for hardcoded secrets
          if grep -r "password\|secret\|key" clusters/ --include="*.yaml" --include="*.yml" | grep -v "kind: Secret\|kind: SealedSecret\|#.*secret\|#.*password"; then
            echo "‚ùå Found potential hardcoded secrets"
            exit 1
          fi
          
          # Check for missing labels
          echo "‚úÖ No hardcoded secrets found"

  security-scan:
    name: Security Scan
    runs-on: vollminlab
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  flux-validation:
    name: Flux Configuration Validation
    runs-on: vollminlab
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flux CLI
        run: |
          curl -s https://fluxcd.io/install.sh | sudo bash

      - name: Validate Flux configurations
        run: |
          echo "üîç Validating Flux configurations..."
          
          # Check Kustomizations
          find clusters -name "kustomization.yaml" | while read file; do
            echo "Validating Kustomization: $file"
            flux build kustomization --path "$(dirname "$file")" || exit 1
          done
          
          # Check HelmReleases
          find clusters -name "helmrelease.yaml" | while read file; do
            echo "Validating HelmRelease: $file"
            kubectl apply --dry-run=client -f "$file" || exit 1
          done

  policy-validation:
    name: Kyverno Policy Validation
    runs-on: vollminlab
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Kyverno CLI
        run: |
          curl -s https://raw.githubusercontent.com/kyverno/kyverno/main/scripts/install-cli.sh | bash

      - name: Validate Kyverno policies
        run: |
          echo "üîç Validating Kyverno policies..."
          find clusters -name "*.yaml" -path "*/kyverno/*" | while read file; do
            if grep -q "kind: Policy\|kind: ClusterPolicy" "$file"; then
              echo "Validating policy: $file"
              kyverno validate "$file" || exit 1
            fi
          done

  integration-test:
    name: Integration Test
    runs-on: vollminlab
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install kubectl
        run: |
          echo "üì¶ Installing kubectl..."
          curl -LO "https://dl.k8s.io/release/v${{ env.KUBERNETES_VERSION }}/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      - name: Test namespace creation
        run: |
          echo "üß™ Testing namespace creation..."
          kubectl create namespace ci-test --dry-run=client || exit 1
          kubectl delete namespace ci-test --ignore-not-found=true

      - name: Test resource validation
        run: |
          echo "üß™ Testing resource validation..."
          # Test a simple ConfigMap
          cat <<EOF | kubectl apply --dry-run=client -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: ci-test
            namespace: default
          data:
            test: "value"
          EOF

  notify-success:
    name: Notify Success
    runs-on: vollminlab
    needs: [validate-manifests, security-scan, flux-validation, policy-validation, integration-test]
    if: success()
    steps:
      - name: Success notification
        run: |
          echo "‚úÖ All CI checks passed!"
          echo "üöÄ Ready for deployment"

  notify-failure:
    name: Notify Failure
    runs-on: vollminlab
    needs: [validate-manifests, security-scan, flux-validation, policy-validation, integration-test]
    if: failure()
    steps:
      - name: Failure notification
        run: |
          echo "‚ùå CI checks failed!"
          echo "üîß Please review the failed steps above"