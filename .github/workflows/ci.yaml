name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'clusters/**'
      - '.github/workflows/**'
      - 'terraform/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'clusters/**'
      - '.github/workflows/**'
      - 'terraform/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  KUBERNETES_VERSION: "1.30.2"
  RUN_SUFFIX: ${{ github.run_id }}-${{ github.run_number }}

jobs:
  validate-changes:
    name: Validate Kubernetes Manifests
    runs-on: vollminlab-1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install kubectl
        run: |
          set -euo pipefail
          echo "üì¶ Installing kubectl..."
          KUBECTL_VERSION="v${{ env.KUBERNETES_VERSION }}"
          curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      - name: Install yq
        run: |
          echo "üì¶ Installing yq..."
          sudo curl -L -o /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          yq --version

      - name: Get changed files
        run: |
          set -euo pipefail
          echo "üîç Finding changed files in this PR..."
          
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          CHANGED_FILES=$(git diff --name-only "$BASE_SHA" HEAD | grep -E '\.(yaml|yml)$' | grep '^clusters/' || echo "")
          
          echo "All changed files in this PR:"
          git diff --name-only "$BASE_SHA" HEAD
          
          if [[ -z "$CHANGED_FILES" ]]; then
            echo "‚úÖ No YAML files changed in clusters directory"
            echo "CHANGED_FILES=" >> $GITHUB_ENV
            exit 0
          fi
          
          echo "Changed YAML files in clusters/: $CHANGED_FILES"
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV

      - name: Validate YAML syntax
        if: env.CHANGED_FILES != ''
        run: |
          set -euo pipefail
          echo "üîç Validating YAML syntax..."
          
          for file in $CHANGED_FILES; do
            if [[ -f "$file" ]]; then
              echo "Validating: $file"
              yq eval '.' "$file" > /dev/null || {
                echo "‚ùå YAML syntax error in $file"
                exit 1
              }
            fi
          done
          
          echo "‚úÖ All YAML files have valid syntax"

      - name: Validate Kubernetes schemas
        if: env.CHANGED_FILES != ''
        run: |
          set -euo pipefail
          echo "üîç Validating Kubernetes schemas..."
          
          for file in $CHANGED_FILES; do
            if [[ -f "$file" ]] && grep -q "kind:" "$file" && grep -q "apiVersion:" "$file"; then
              echo "Validating schema: $file"
              kubectl apply --dry-run=client -f "$file" || {
                echo "‚ùå Kubernetes schema validation failed for $file"
                exit 1
              }
            fi
          done
          
          echo "‚úÖ All Kubernetes resources have valid schemas"

  test-deployment:
    name: Flux Configuration Validation
    runs-on: vollminlab-2
    needs: validate-changes
    if: env.CHANGED_FILES != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup kubectl
        run: |
          set -euo pipefail
          KUBECTL_VERSION="v${{ env.KUBERNETES_VERSION }}"
          curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Setup Flux CLI
        run: |
          set -euo pipefail
          echo "üì¶ Installing Flux CLI..."
          FLUX_VERSION="2.2.2"
          curl -L "https://github.com/fluxcd/flux2/releases/download/v${FLUX_VERSION}/flux_${FLUX_VERSION}_linux_amd64.tar.gz" -o flux.tar.gz
          tar -xzf flux.tar.gz
          sudo mv flux /usr/local/bin/
          flux version

      - name: Create test namespace
        run: |
          set -euo pipefail
          TEST_NAMESPACE="ci-test-${{ env.RUN_SUFFIX }}"
          echo "TEST_NAMESPACE=$TEST_NAMESPACE" >> $GITHUB_ENV
          
          kubectl create namespace "$TEST_NAMESPACE" || true
          echo "‚úÖ Created test namespace: $TEST_NAMESPACE"

      - name: Test deploy changed resources
        run: |
          set -euo pipefail
          TEST_NAMESPACE="$TEST_NAMESPACE"
          RUN_SUFFIX="${{ env.RUN_SUFFIX }}"
          
          echo "üîç Test deploying changed resources..."
          
          # Get changed files from previous step
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          CHANGED_FILES=$(git diff --name-only "$BASE_SHA" HEAD | grep -E '\.(yaml|yml)$' | grep '^clusters/' || echo "")
          
          if [[ -z "$CHANGED_FILES" ]]; then
            echo "‚úÖ No resources to test deploy"
            exit 0
          fi
          
          echo "Changed files: $CHANGED_FILES"
          
          # Deploy each changed file to test namespace
          for file in $CHANGED_FILES; do
            if [[ -f "$file" ]] && grep -q "kind:" "$file"; then
              echo "Test deploying: $file"
              
              # Create test version with modified namespace and name
              yq eval "
                .metadata.namespace = \"$TEST_NAMESPACE\" |
                .metadata.name = \"test-$(basename "$file" .yaml)-$RUN_SUFFIX\"
              " "$file" | kubectl apply -f - || {
                echo "‚ùå Failed to deploy: $file"
                exit 1
              }
            fi
          done
          
          echo "‚úÖ Successfully test deployed all changed resources"

      - name: Wait for deployments
        run: |
          set -euo pipefail
          TEST_NAMESPACE="$TEST_NAMESPACE"
          
          echo "‚è≥ Waiting for deployments to be ready..."
          kubectl wait --for=condition=available --timeout=300s deployment --all -n "$TEST_NAMESPACE" || {
            echo "‚ö†Ô∏è Some deployments may not be ready, but continuing..."
          }
          
          echo "‚úÖ Deployment validation completed"

      - name: Cleanup test namespace
        if: always()
        run: |
          set -euo pipefail
          TEST_NAMESPACE="$TEST_NAMESPACE"
          
          echo "üßπ Cleaning up test namespace..."
          kubectl delete namespace "$TEST_NAMESPACE" --ignore-not-found=true
          echo "‚úÖ Cleaned up test namespace: $TEST_NAMESPACE"

  security-scan:
    name: Security Scan
    runs-on: vollminlab-3
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.28.0
        timeout-minutes: 3
        continue-on-error: true
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true

      - name: Run Trivy IaC scan
        uses: aquasecurity/trivy-action@0.28.0
        timeout-minutes: 3
        continue-on-error: true
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-config-results.sarif'
          severity: 'HIGH,CRITICAL'

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif,trivy-config-results.sarif'

  policy-validation:
    name: Kyverno Policy Validation
    runs-on: vollminlab-1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install kyverno CLI
        run: |
          set -euo pipefail
          echo "üì¶ Installing Kyverno CLI..."
          curl -s https://raw.githubusercontent.com/kyverno/kyverno/main/scripts/install-cli.sh | bash
          kyverno version

      - name: Validate against Kyverno policies
        run: |
          set -euo pipefail
          echo "üîç Validating resources against Kyverno policies..."
          
          # Get changed files
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          CHANGED_FILES=$(git diff --name-only "$BASE_SHA" HEAD | grep -E '\.(yaml|yml)$' | grep '^clusters/' || echo "")
          
          if [[ -z "$CHANGED_FILES" ]]; then
            echo "‚úÖ No files to validate against policies"
            exit 0
          fi
          
          # Find Kyverno policies
          POLICY_FILES=$(find clusters -name "*.yaml" -path "*/kyverno/*" | xargs grep -l "kind: Policy\|kind: ClusterPolicy" || echo "")
          
          if [[ -z "$POLICY_FILES" ]]; then
            echo "‚ö†Ô∏è No Kyverno policies found"
            exit 0
          fi
          
          # Validate changed files against policies
          for file in $CHANGED_FILES; do
            if [[ -f "$file" ]] && grep -q "kind:" "$file"; then
              echo "Validating: $file"
              kyverno apply $POLICY_FILES --resource "$file" || {
                echo "‚ùå Policy validation failed for $file"
                exit 1
              }
            fi
          done
          
          echo "‚úÖ All resources comply with Kyverno policies"

  integration-test:
    name: Integration Test
    runs-on: vollminlab-2
    needs: [validate-changes, test-deployment, security-scan, policy-validation]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Integration test placeholder
        run: |
          set -euo pipefail
          echo "üß™ Running integration tests..."
          echo "‚úÖ Integration tests passed!"
          echo "üìã All components are working correctly together"

  notify-success:
    name: Notify Success
    runs-on: vollminlab-3
    needs: [validate-changes, test-deployment, security-scan, policy-validation, integration-test]
    if: success()
    steps:
      - name: Success notification
        run: |
          set -euo pipefail
          echo "‚úÖ All CI checks passed!"
          echo "üöÄ Ready for deployment"

  notify-failure:
    name: Notify Failure
    runs-on: vollminlab-3
    needs: [validate-changes, test-deployment, security-scan, policy-validation, integration-test]
    if: failure()
    steps:
      - name: Failure notification
        run: |
          set -euo pipefail
          echo "‚ùå CI checks failed!"
          echo "üîß Please review the failed steps above"
