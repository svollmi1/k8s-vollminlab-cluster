name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'clusters/**'
      - '.github/workflows/**'
      - 'terraform/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'clusters/**'
      - '.github/workflows/**'
      - 'terraform/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write

defaults:
  run:
    shell: bash

env:
  KUBERNETES_VERSION: "1.30.2"
  RUN_SUFFIX: ${{ github.run_id }}-${{ github.run_number }}
  TRIVY_CACHE_DIR: /tmp/trivy-cache

jobs:
  validate-changes:
    name: Validate Kubernetes Manifests
    runs-on: vollminlab-1
    timeout-minutes: 10
    outputs:
      changed: ${{ steps.get-changed-files.outputs.changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install kubectl
        run: |
          set -euo pipefail
          echo "📦 Installing kubectl..."
          KUBECTL_VERSION="v${{ env.KUBERNETES_VERSION }}"
          
          # Download kubectl and checksums
          curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
          curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl.sha256"
          
          # Verify checksum
          echo "$(cat kubectl.sha256) kubectl" | sha256sum --check
          
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      - name: Install yq
        run: |
          set -euo pipefail
          echo "📦 Installing yq..."
          sudo curl -L -o /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          yq --version

      - name: Get changed files
        id: get-changed-files
        run: |
          set -euo pipefail
          echo "🔍 Finding changed files..."
          
          # Handle both PR and push events correctly
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            RANGE="$BASE_SHA..HEAD"
          else
            BASE_SHA="${{ github.event.before }}"
            if [[ -z "$BASE_SHA" ]]; then
              BASE_SHA="$(git rev-list --max-parents=0 HEAD | tail -1)"
            fi
            RANGE="$BASE_SHA..HEAD"
          fi
          
          echo "Using range: $RANGE"
          CHANGED_FILES=$(git diff --name-only "$RANGE" | grep -E '\.(yaml|yml)$' | grep '^clusters/' || echo "")
          
          echo "All changed files:"
          git diff --name-only "$RANGE"
          
          if [[ -z "$CHANGED_FILES" ]]; then
            echo "✅ No YAML files changed in clusters directory"
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "CHANGED_FILES=" >> $GITHUB_ENV
            exit 0
          fi
          
          echo "Changed YAML files in clusters/: $CHANGED_FILES"
          echo "changed=true" >> $GITHUB_OUTPUT
          {
            echo "CHANGED_FILES<<EOF"
            printf '%s\n' "$CHANGED_FILES"
            echo "EOF"
          } >> $GITHUB_ENV

      - name: Install yamllint
        if: env.CHANGED_FILES != ''
        run: |
          set -euo pipefail
          echo "📦 Installing yamllint..."
          sudo apt-get update
          sudo apt-get install -y python3-pip
          sudo pip3 install yamllint
          yamllint --version

      - name: Install gitleaks
        if: env.CHANGED_FILES != ''
        run: |
          set -euo pipefail
          echo "📦 Installing gitleaks..."
          curl -L -o gitleaks.tar.gz "https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz"
          tar -xzf gitleaks.tar.gz
          sudo mv gitleaks /usr/local/bin/
          gitleaks version

      - name: Validate YAML syntax
        if: env.CHANGED_FILES != ''
        run: |
          set -euo pipefail
          echo "🔍 Validating YAML syntax with yamllint..."
          
          # Get range for diff
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            RANGE="$BASE_SHA..HEAD"
          else
            BASE_SHA="${{ github.event.before }}"
            if [[ -z "$BASE_SHA" ]]; then
              BASE_SHA="$(git rev-list --max-parents=0 HEAD | tail -1)"
            fi
            RANGE="$BASE_SHA..HEAD"
          fi
          
          # Create yamllint config for Kubernetes files
          cat > .yamllint << 'EOF'
          extends: default
          rules:
            document-start:
              present: false
            new-line-at-end-of-file:
              level: warning
            line-length:
              max: 200
            truthy:
              allowed-values: ['true', 'false', 'on', 'off']
          EOF
          
          # Use null-delimited output to handle spaces in filenames
          git diff --name-only -z "$RANGE" | grep -zE '\.(yaml|yml)$' | grep -z '^clusters/' | while IFS= read -r -d '' file; do
            if [[ -f "$file" ]]; then
              echo "Validating: $file"
              yamllint "$file" || {
                echo "❌ YAML lint error in $file"
            exit 1
          }
            fi
          done
          
          echo "✅ All YAML files have valid syntax"

      - name: Install kubeconform
        if: env.CHANGED_FILES != ''
        run: |
          set -euo pipefail
          echo "📦 Installing kubeconform..."
          # Use latest version and try tar.gz approach first
          curl -L https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz | tar xvzf -
          
          # Verify the binary was extracted
          if [[ ! -f kubeconform ]]; then
            echo "❌ kubeconform binary not found after extraction"
            exit 1
          fi
          
          sudo mv kubeconform /usr/local/bin/
          kubeconform -version || kubeconform -v

      - name: Validate Kubernetes schemas
        if: env.CHANGED_FILES != ''
        run: |
          set -euo pipefail
          echo "🔍 Validating Kubernetes schemas with kubeconform..."
          
          # Get range for diff
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            RANGE="$BASE_SHA..HEAD"
          else
            BASE_SHA="${{ github.event.before }}"
            if [[ -z "$BASE_SHA" ]]; then
              BASE_SHA="$(git rev-list --max-parents=0 HEAD | tail -1)"
            fi
            RANGE="$BASE_SHA..HEAD"
          fi
          
          # Use null-delimited output to handle spaces in filenames
          git diff --name-only -z "$RANGE" | grep -zE '\.(yaml|yml)$' | grep -z '^clusters/' | while IFS= read -r -d '' file; do
            if [[ -f "$file" ]] && grep -q "kind:" "$file" && grep -q "apiVersion:" "$file"; then
              echo "Validating schema: $file"
              
              # Skip Flux CD resources that kubeconform doesn't have schemas for
              KIND=$(yq eval '.kind' "$file")
              case "$KIND" in
                Kustomization|HelmRelease|OCIRepository|HelmRepository|GitRepository|Bucket|ImagePolicy|ImageRepository|ImageUpdateAutomation)
                  echo "Skipping Flux CD resource (no schema): $KIND in $file"
                continue
                  ;;
              esac
              
              kubeconform -strict -summary -schema-location default -schema-location 'https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/{{.Group}}/{{.ResourceKind}}_{{.ResourceAPIVersion}}.json' "$file" || {
                echo "❌ Kubernetes schema validation failed for $file"
                exit 1
              }
                fi
              done
              
          echo "✅ All Kubernetes resources have valid schemas"

      - name: Scan for secrets
        if: env.CHANGED_FILES != ''
        run: |
          set -euo pipefail
          echo "🔍 Scanning changed files for secrets..."
          
          # Get range for diff
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            RANGE="$BASE_SHA..HEAD"
          else
            BASE_SHA="${{ github.event.before }}"
            if [[ -z "$BASE_SHA" ]]; then
              BASE_SHA="$(git rev-list --max-parents=0 HEAD | tail -1)"
            fi
            RANGE="$BASE_SHA..HEAD"
          fi
          
          # Create temporary directory and copy changed files
          TEMP_DIR=$(mktemp -d)
          git diff --name-only -z "$RANGE" | grep -zE '\.(yaml|yml)$' | grep -z '^clusters/' | while IFS= read -r -d '' file; do
            if [[ -f "$file" ]]; then
              cp "$file" "$TEMP_DIR/"
            fi
          done
          
          cd "$TEMP_DIR"
          
          # Create gitleaks config in temp directory
          cat > gitleaks.toml << 'EOF'
          [extend]
          useDefault = true
          
          [allowlist]
          description = "Ignore SealedSecrets keys"
          regexes = [
            "-----BEGIN CERTIFICATE-----",
            "-----BEGIN PUBLIC KEY-----"
          ]
          EOF
          
          git init
          git config user.email "ci@example.com"
          git config user.name "CI"
          git add .
          git commit -m "CI scan" || true
          
          # Run gitleaks with custom config
          set +e
          gitleaks detect --source . --config gitleaks.toml --no-banner --exit-code 1
          rc=$?
          set -e
          if [ $rc -ne 0 ]; then
            echo "❌ Secrets detected in changed files"
            echo "Please remove any hardcoded secrets and use SealedSecrets instead"
            exit 1
          fi
          
          echo "✅ No secrets detected in changed files"

  test-deployment:
    name: Flux Configuration Validation
    runs-on: vollminlab-2
    needs: validate-changes
    if: needs.validate-changes.outputs.changed == 'true'
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup kubectl
        run: |
          set -euo pipefail
          KUBECTL_VERSION="v${{ env.KUBERNETES_VERSION }}"
          curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Install yq
        run: |
          set -euo pipefail
          echo "📦 Installing yq..."
          sudo curl -L -o /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          yq --version

      - name: Setup Flux CLI
        run: |
          set -euo pipefail
          echo "📦 Installing Flux CLI..."
          FLUX_VERSION="2.2.2"
          curl -L "https://github.com/fluxcd/flux2/releases/download/v${FLUX_VERSION}/flux_${FLUX_VERSION}_linux_amd64.tar.gz" -o flux.tar.gz
          tar -xzf flux.tar.gz
          sudo mv flux /usr/local/bin/
          flux version

      - name: Create test namespace
        run: |
          set -euo pipefail
          TEST_NAMESPACE="ci-test-${{ env.RUN_SUFFIX }}"
          echo "TEST_NAMESPACE=$TEST_NAMESPACE" >> $GITHUB_ENV
          
          kubectl create namespace "$TEST_NAMESPACE" || true
          echo "✅ Created test namespace: $TEST_NAMESPACE"

      - name: Check Flux CRDs
        run: |
          set -euo pipefail
          echo "🔍 Checking Flux CRDs availability..."
          
          if ! kubectl get crd ocirepositories.source.toolkit.fluxcd.io >/dev/null 2>&1; then
            echo "⚠️ OCIRepository CRD not found - skipping Flux resource testing"
            echo "FLUX_CRDS_AVAILABLE=false" >> $GITHUB_ENV
            exit 0
          fi
          
          if ! kubectl get crd helmreleases.helm.toolkit.fluxcd.io >/dev/null 2>&1; then
            echo "⚠️ HelmRelease CRD not found - skipping Flux resource testing"
            echo "FLUX_CRDS_AVAILABLE=false" >> $GITHUB_ENV
            exit 0
          fi
          
          echo "✅ Flux CRDs are available"
          echo "FLUX_CRDS_AVAILABLE=true" >> $GITHUB_ENV

      - name: Test deploy changed resources
        run: |
          set -euo pipefail
          TEST_NAMESPACE="$TEST_NAMESPACE"
          RUN_SUFFIX="${{ env.RUN_SUFFIX }}"
          
          echo "🔍 Test deploying changed resources..."
          
          # Get changed files with proper range handling
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            RANGE="$BASE_SHA..HEAD"
          else
            BASE_SHA="${{ github.event.before }}"
            if [[ -z "$BASE_SHA" ]]; then
              BASE_SHA="$(git rev-list --max-parents=0 HEAD | tail -1)"
            fi
            RANGE="$BASE_SHA..HEAD"
          fi
          
          CHANGED_FILES=$(git diff --name-only "$RANGE" | grep -E '\.(yaml|yml)$' | grep '^clusters/' || echo "")
          
          if [[ -z "$CHANGED_FILES" ]]; then
            echo "✅ No resources to test deploy"
            exit 0
          fi
          
          echo "Changed files: $CHANGED_FILES"
          
          # Create OCI mapping file for Flux resources
          OCI_MAPPING_FILE="/tmp/oci-mapping-$RUN_SUFFIX.txt"
          touch "$OCI_MAPPING_FILE"
          
          # First pass: Deploy OCIRepositories
          for file in $CHANGED_FILES; do
            if [[ -f "$file" ]] && yq eval '.kind' "$file" | grep -qi '^OCIRepository$'; then
              echo "Test deploying OCIRepository: $file"
              
              ORIG_NAME=$(yq eval '.metadata.name' "$file")
              TEST_NAME="test-${ORIG_NAME}-${RUN_SUFFIX}"
              
              echo "$ORIG_NAME:$TEST_NAME" >> "$OCI_MAPPING_FILE"
              
            yq eval "
              .metadata.namespace = \"$TEST_NAMESPACE\" |
                .metadata.name = \"$TEST_NAME\"
            " "$file" | kubectl apply -f - || {
              echo "❌ Failed to deploy OCIRepository: $file"
            exit 1
          }
            fi
          done
          
          # Wait for OCIRepositories to be ready before deploying HelmReleases
          if [[ "${FLUX_CRDS_AVAILABLE}" == "true" ]]; then
            echo "⏳ Waiting for OCIRepositories to be ready..."
            kubectl wait --for=condition=Ready --timeout=300s ocirepositories.source.toolkit.fluxcd.io --all -n "$TEST_NAMESPACE" || {
              echo "⚠️ Some OCIRepositories may not be ready, but continuing..."
            }
          fi
          
          # Second pass: Deploy HelmReleases with sourceRef mapping
          for file in $CHANGED_FILES; do
            if [[ -f "$file" ]] && yq eval '.kind' "$file" | grep -qi '^HelmRelease$'; then
              if [[ "${FLUX_CRDS_AVAILABLE}" != "true" ]]; then
                echo "Skipping HelmRelease deploy (Flux CRDs unavailable): $file"
                continue
              fi
              echo "Test deploying HelmRelease: $file"

              if [[ "$(yq eval '.spec.chartRef // ""' "$file")" != "" ]]; then
                ORIG_SOURCE_REF="$(yq eval '.spec.chartRef.name' "$file")"
              else
                ORIG_SOURCE_REF="$(yq eval '.spec.chart.spec.sourceRef.name' "$file")"
              fi

              TEST_SOURCE_REF="$(grep "^${ORIG_SOURCE_REF}:" "$OCI_MAPPING_FILE" | cut -d: -f2 || true)"
              [[ -z "$TEST_SOURCE_REF" ]] && TEST_SOURCE_REF="test-${ORIG_SOURCE_REF}-${RUN_SUFFIX}"

              CLEAN_NAME="$(basename "$file" | sed -E 's/\.(ya?ml)$//' | tr '[:upper:]' '[:lower:]' \
                | sed -E 's/[^a-z0-9-]+/-/g;s/-+/-/g;s/^-|-$//g')"

              if [[ "$(yq eval '.spec.chartRef // ""' "$file")" != "" ]]; then
                yq eval "
                  .metadata.namespace = \"$TEST_NAMESPACE\" |
                  .metadata.name = \"test-${CLEAN_NAME}-${RUN_SUFFIX}\" |
                  .spec.chartRef.name = \"$TEST_SOURCE_REF\" |
                  .spec.chartRef.namespace = \"$TEST_NAMESPACE\"
                " "$file" | kubectl apply -f - || { echo "❌ Failed: $file"; exit 1; }
              else
                yq eval "
                  .metadata.namespace = \"$TEST_NAMESPACE\" |
                  .metadata.name = \"test-${CLEAN_NAME}-${RUN_SUFFIX}\" |
                  .spec.chart.spec.sourceRef.name = \"$TEST_SOURCE_REF\" |
                  .spec.chart.spec.sourceRef.namespace = \"$TEST_NAMESPACE\"
                " "$file" | kubectl apply -f - || { echo "❌ Failed: $file"; exit 1; }
              fi
            fi
          done
          
          # Third pass: Deploy other namespaced resources (skip cluster-scoped and Flux resources)
          for file in $CHANGED_FILES; do
            if [[ -f "$file" ]] && yq eval '.kind' "$file" | grep -q .; then
              KIND=$(yq eval '.kind' "$file")
              
              # Skip Flux resources (already handled above)
              if [[ "$KIND" == "OCIRepository" || "$KIND" == "HelmRelease" ]]; then
                continue
              fi
              
              # Skip cluster-scoped resources and Kustomization (CRD not available in test namespace)
              case "$KIND" in
                ClusterRole|ClusterRoleBinding|ClusterPolicy|ClusterPolicyReport|CustomResourceDefinition|Namespace|Node|PersistentVolume|StorageClass|ValidatingAdmissionWebhook|MutatingAdmissionWebhook|Kustomization)
                  echo "Skipping $KIND resource: $file"
                  continue
                  ;;
              esac
              
              echo "Test deploying namespaced resource: $file"
              
              # Clean filename for DNS-1123 compliance
              CLEAN_NAME="$(basename "$file" | sed -E 's/\.(ya?ml)$//' | tr '[:upper:]' '[:lower:]' \
                | sed -E 's/[^a-z0-9-]+/-/g;s/-+/-/g;s/^-|-$//g')"
              
              yq eval "
                .metadata.namespace = \"$TEST_NAMESPACE\" |
                .metadata.name = \"test-${CLEAN_NAME}-${RUN_SUFFIX}\"
              " "$file" | kubectl apply -f - || {
                echo "❌ Failed to deploy: $file"
              exit 1
              }
            fi
          done
          
          echo "✅ Successfully test deployed all changed resources"

      - name: Wait for deployments
        run: |
          set -euo pipefail
          TEST_NAMESPACE="$TEST_NAMESPACE"
          
          echo "⏳ Waiting for deployments to be ready..."
          kubectl wait --for=condition=available --timeout=300s deployment --all -n "$TEST_NAMESPACE" || {
            echo "⚠️ Some deployments may not be ready, but continuing..."
          }
          
          echo "✅ Deployment validation completed"

      - name: Cleanup test namespace
        if: always()
        run: |
          set -euo pipefail
          TEST_NAMESPACE="$TEST_NAMESPACE"
          
          echo "🧹 Cleaning up test namespace..."
          kubectl delete namespace "$TEST_NAMESPACE" --ignore-not-found=true
          echo "✅ Cleaned up test namespace: $TEST_NAMESPACE"

  security-scan:
    name: Security Scan
    runs-on: vollminlab-3
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare Trivy cache
        run: mkdir -p "${{ env.TRIVY_CACHE_DIR }}"

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.28.0
        timeout-minutes: 3
        continue-on-error: true
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          cache-dir: ${{ env.TRIVY_CACHE_DIR }}

      - name: Run Trivy IaC scan
        uses: aquasecurity/trivy-action@0.28.0
        timeout-minutes: 3
        continue-on-error: true
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-config-results.sarif'
          severity: 'HIGH,CRITICAL'
          cache-dir: ${{ env.TRIVY_CACHE_DIR }}

      - name: Upload Trivy filesystem SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-fs'
          
      - name: Upload Trivy IaC SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-config-results.sarif'
          category: 'trivy-config'

  policy-validation:
    name: Kyverno Policy Validation
    runs-on: vollminlab-1
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install kyverno CLI
        run: |
          set -euo pipefail
          echo "📦 Installing Kyverno CLI..."
          curl -L "https://github.com/kyverno/kyverno/releases/download/v1.12.1/kyverno-cli_v1.12.1_linux_x86_64.tar.gz" -o kyverno.tar.gz
          tar -xzf kyverno.tar.gz
          sudo mv kyverno /usr/local/bin/
          kyverno version

      - name: Validate against Kyverno policies
        run: |
          set -euo pipefail
          echo "🔍 Validating resources against Kyverno policies..."
          
          # Get changed files with proper range handling
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              BASE_SHA="${{ github.event.pull_request.base.sha }}"
            RANGE="$BASE_SHA..HEAD"
          else
            BASE_SHA="${{ github.event.before }}"
            if [[ -z "$BASE_SHA" ]]; then
              BASE_SHA="$(git rev-list --max-parents=0 HEAD | tail -1)"
            fi
            RANGE="$BASE_SHA..HEAD"
          fi
          
          CHANGED_FILES=$(git diff --name-only "$RANGE" | grep -E '\.(yaml|yml)$' | grep '^clusters/' || echo "")
          
          if [[ -z "$CHANGED_FILES" ]]; then
            echo "✅ No files to validate against policies"
            exit 0
          fi
            
          # Find policy files by parsing 'kind' for each document (handles multi-doc YAML)
          mapfile -t POLICY_FILES < <(
            git ls-files 'clusters/**/kyverno/**/*.ya?ml' \
            | while IFS= read -r f; do
                if yq eval-all '.[].kind' "$f" | grep -Eq '^(Policy|ClusterPolicy)$'; then
                  echo "$f"
                fi
              done
          )
          
          if [[ ${#POLICY_FILES[@]} -eq 0 ]]; then
            echo "⚠️ No Kyverno Policy/ClusterPolicy documents found"
            exit 0
          fi
          
          # Validate only the changed resource files
          for file in $CHANGED_FILES; do
            [[ -f "$file" ]] || continue
            # Skip Flux kinds if policies don't target them
            if yq eval '.kind' "$file" | grep -Eq '^(HelmRelease|OCIRepository)$'; then
              echo "Skipping Flux resource (not targeted by policies): $file"
              continue
            fi
            
            echo "Validating: $file"
            args=()
            for p in "${POLICY_FILES[@]}"; do args+=(-f "$p"); done
            kyverno apply "${args[@]}" --resource "$file" || {
              echo "❌ Policy validation failed for $file"
              exit 1
            }
          done
          
          echo "✅ All resources comply with Kyverno policies"
          
  integration-test:
    name: Integration Test
    runs-on: vollminlab-2
    needs: [validate-changes, test-deployment, security-scan, policy-validation]
    if: always() && (needs.validate-changes.result == 'success' || needs.validate-changes.result == 'skipped') && (needs.test-deployment.result == 'success' || needs.test-deployment.result == 'skipped') && needs.security-scan.result == 'success' && needs.policy-validation.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Integration test placeholder
        run: |
          set -euo pipefail
          echo "🧪 Running integration tests..."
          echo "✅ Integration tests passed!"
          echo "📋 All components are working correctly together"

  notify-success:
    name: Notify Success
    runs-on: vollminlab-3
    needs: [validate-changes, test-deployment, security-scan, policy-validation, integration-test]
    if: success()
    steps:
      - name: Success notification
        run: |
          set -euo pipefail
          echo "✅ All CI checks passed!"
          echo "🚀 Ready for deployment"

  notify-failure:
    name: Notify Failure
    runs-on: vollminlab-3
    needs: [validate-changes, test-deployment, security-scan, policy-validation, integration-test]
    if: failure()
    steps:
      - name: Failure notification
        run: |
          set -euo pipefail
          echo "❌ CI checks failed!"
          echo "🔧 Please review the failed steps above"
