#!/usr/bin/env groovy

def label = "k8s-${UUID.randomUUID().toString()}"
def home = "/home/jenkins"
def workspace = "${home}/workspace"
def testNamespace = "ci-testing"

podTemplate(
    label: label,
    containers: [
        containerTemplate(
            name: 'alpine',
            image: 'alpine:3.11',
            ttyEnabled: true,
            command: 'cat',
            envVars: [
                envVar(key: 'GITHUB_TOKEN', value: credentials('github-pat'))
            ],
            args: '''/bin/sh -c "apk add --no-cache kubectl yamllint && cat"'''
        ),
    ]
) {
    node(label) {
        // Checkout repository
        stage('Checkout Repo') {
            checkout scm
        }

        // Get list of changed files
        def files = sh(script: 'git diff --name-only origin/${env.BRANCH_NAME} HEAD', returnStdout: true).trim().split("\n")

        stage('Parse and Validate YAML') {
            files.each { file ->
                if (file.endsWith(".yaml") || file.endsWith(".yml")) {
                    echo "Validating ${file}"
                    try {
                        sh "yamllint ${file}"
                        sh "kubectl apply --dry-run=client -f ${file} --namespace=${testNamespace}"
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }

        stage('Apply Resources') {
            parallel(
                files.collectEntries { file ->
                    if (file.endsWith(".yaml") || file.endsWith(".yml")) {
                        ["Apply ${file}": {
                            echo "Applying ${file}"
                            sh "kubectl apply -f ${file} --namespace=${testNamespace}"
                        }]
                    }
                }
            )
        }

        stage('Cleanup') {
            parallel(
                files.collectEntries { file ->
                    if (file.endsWith(".yaml") || file.endsWith(".yml")) {
                        ["Cleanup ${file}": {
                            echo "Cleaning up ${file}"
                            sh "kubectl delete -f ${file} --namespace=${testNamespace}"
                        }]
                    }
                }
            )
        }
    }
}

