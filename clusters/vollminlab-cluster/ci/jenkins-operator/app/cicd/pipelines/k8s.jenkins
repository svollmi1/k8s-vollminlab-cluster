#!/usr/bin/env groovy

def label = "k8s-${UUID.randomUUID().toString()}"
def home = "/home/jenkins"
def workspace = "${home}/workspace"
def testNamespace = "ci-testing"

podTemplate(
    label: label,
    containers: [
        containerTemplate(
            name: 'kubectl-container',
            image: 'lachlanevenson/k8s-kubectl:v1.21.2',
            ttyEnabled: true,
            command: 'sh',  // Use sh instead of bash
            args: '-c "kubectl version && tail -f /dev/null"',  // Ensure the container keeps running
        ),
    ]
) {
    node(label) {
        // Checkout repository
        stage('Checkout Repo') {
            checkout scm
        }

        // Get list of changed files
        def files = sh(script: "git diff --name-only origin/${env.BRANCH_NAME} HEAD", returnStdout: true).trim().split("\n")

        stage('Parse and Validate YAML') {
            files.each { file ->
                if (file.endsWith(".yaml") || file.endsWith(".yml")) {
                    echo "Validating ${file}"
                    try {
                        // Ensure kubectl and yamllint run properly with sh
                        sh "yamllint ${file}"
                        sh "kubectl apply --dry-run=client -f ${file} --namespace=${testNamespace}"
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }

        stage('Apply Resources') {
            try {
                parallel(
                    files.collectEntries { file ->
                        if (file.endsWith(".yaml") || file.endsWith(".yml")) {
                            ["Apply ${file}": {
                                echo "Applying ${file}"
                                sh "kubectl apply -f ${file} --namespace=${testNamespace}"
                            }]
                        }
                    }
                )
            } catch (Exception e) {
                currentBuild.result = 'FAILURE'
                throw e
            }
        }

        stage('Cleanup') {
            try {
                parallel(
                    files.collectEntries { file ->
                        if (file.endsWith(".yaml") || file.endsWith(".yml")) {
                            ["Cleanup ${file}": {
                                echo "Cleaning up ${file}"
                                sh "kubectl delete -f ${file} --namespace=${testNamespace}"
                            }]
                        }
                    }
                )
            } catch (Exception e) {
                currentBuild.result = 'FAILURE'
                throw e
            }
        }
    }
}

