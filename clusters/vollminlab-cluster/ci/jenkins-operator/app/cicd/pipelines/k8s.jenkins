pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
metadata:
  namespace: ci
spec:
  serviceAccountName: jenkins-operator-jenkins
  containers:
  - name: kubectl
    image: lachlanevenson/k8s-kubectl:v1.21.2
    command:
    - cat
    tty: true
  - name: yamllint
    image: cytopia/yamllint:latest
    command:
    - cat
    tty: true
  - name: git
    image: alpine/git:latest
    command:
    - cat
    tty: true
'''
            defaultContainer 'jnlp'
        }
    }

    environment {
        GITHUB_TOKEN = credentials('github-pat')
        TEST_NAMESPACE = 'ci-testing'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Get Changed Files') {
            steps {
                container('git') {
                    script {
                        env.CHANGED_FILES = sh(script: "git diff --name-only HEAD^1 HEAD || git ls-files", returnStdout: true).trim()
                        echo "Changed files: ${env.CHANGED_FILES}"
                    }
                }
            }
        }

        stage('Lint Changed YAML') {
            steps {
                container('yamllint') {
                    script {
                        sh '''
                        if [ ! -f .yamllint ]; then
                            cat << EOF > .yamllint
        extends: default

        rules:
          line-length:
            max: 120
            level: warning
          document-start: disable
          truthy: disable
        EOF
                        fi
                        '''
                        env.CHANGED_FILES.split('\n').each { file ->
                            if (file.endsWith('.yaml') || file.endsWith('.yml')) {
                                echo "Linting file: ${file}"
                                sh "yamllint -c .yamllint ${file} || echo 'yamllint found issues but continuing'"
                            }
                        }
                    }
                }
            }
        }

        stage('Validate Changed Kubernetes Resources') {
            steps {
                container('kubectl') {
                    script {
                        env.CHANGED_FILES.split('\n').each { file ->
                            if (file.endsWith('.yaml') || file.endsWith('.yml')) {
                                sh "kubectl apply --dry-run=client -f ${file} -n ${TEST_NAMESPACE}"
                            }
                        }
                    }
                }
            }
        }

        stage('Deploy Changed Resources to Test Namespace') {
            steps {
                container('kubectl') {
                    script {
                        env.CHANGED_FILES.split('\n').each { file ->
                            if (file.endsWith('.yaml') || file.endsWith('.yml')) {
                                sh "kubectl apply -f ${file} -n ${TEST_NAMESPACE}"
                            }
                        }
                    }
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                container('kubectl') {
                    sh "kubectl get all -n ${TEST_NAMESPACE}"
                    // Add more verification steps as needed
                }
            }
        }
    }

    post {
        always {
            container('kubectl') {
                script {
                    if (env.CHANGED_FILES) {
                        env.CHANGED_FILES.split('\n').each { file ->
                            if (file.endsWith('.yaml') || file.endsWith('.yml')) {
                                sh "kubectl delete -f ${file} -n ${TEST_NAMESPACE}"
                            }
                        }
                    }
                }
            }
        }
    }
}
