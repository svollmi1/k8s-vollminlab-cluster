#!/usr/bin/env groovy

def label = "k8s-${UUID.randomUUID().toString()}"
def home = "/home/jenkins"
def workspace = "${home}/agent/workspace/k8s-test-deploy"  // Assuming this is the workspace path

podTemplate(label: label,
    containers: [
        containerTemplate(name: 'kubectl', image: 'bitnami/kubectl:latest', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'git', image: 'alpine/git:latest', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'yq', image: 'mikefarah/yq:latest', ttyEnabled: true, command: 'cat'),
    ],
) {
    node(label) {
        stage('Checkout Code') {
            container('git') {
                // Ensure the repository is marked as a safe directory
                sh "git config --global --add safe.directory ${workspace}"
                
                // Checkout the SCM repository, which should include fetching the code
                checkout scm
                // Verify repository status after checkout
                def gitStatus = sh(script: "git status", returnStatus: true)
                if (gitStatus != 0) {
                    error "Git repository checkout failed or repository is in an invalid state."
                }
                echo "Repository successfully checked out."
            }
        }

	stage('Detect Changed Files') {
    	    container('git') {
        	script {
            	// Fetch the latest changes from the remote main branch
                sh 'git fetch origin main'
                // Capture the list of changed files into the 'changedFiles' variable
                def changedFiles = sh(script: 'git diff --name-only origin/main', returnStdout: true).trim().split("\n")
                // Output the changed files (for debugging purposes)
                echo "Changed files: ${changedFiles}"
                }
            }
        }

        stage('Lint YAML Files') {
            container('yq') {
                changedFiles.each { file ->
                    if (file.endsWith(".yaml") || file.endsWith(".yml")) {
                        echo "Linting ${file}"
                        sh "yq eval '.' ${file} > /dev/null"
                    }
                }
            }
        }

        stage('Validate and Apply Manifests in ci-testing') {
            container('kubectl') {
                changedFiles.each { file ->
                    if (file.endsWith(".yaml") || file.endsWith(".yml")) {
                        echo "Validating and applying ${file}"
                        sh "kubectl apply --dry-run=client -f ${file} -n ci-testing"
                        sh "kubectl apply -f ${file} -n ci-testing"
                    }
                }
            }
        }

        stage('Cleanup Applied Resources') {
            container('kubectl') {
                changedFiles.each { file ->
                    if (file.endsWith(".yaml") || file.endsWith(".yml")) {
                        echo "Deleting ${file} from ci-testing"
                        sh "kubectl delete -f ${file} -n ci-testing || true"
                    }
                }
            }
        }
    }
}
