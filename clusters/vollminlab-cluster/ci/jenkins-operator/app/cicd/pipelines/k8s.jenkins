pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
metadata:
  namespace: ci
spec:
  serviceAccountName: jenkins-operator-jenkins
  containers:
  - name: kubectl
    image: lachlanevenson/k8s-kubectl:v1.21.2
    command:
    - cat
    tty: true
  - name: yamllint
    image: cytopia/yamllint:latest
    command:
    - cat
    tty: true
  - name: git
    image: alpine/git:latest
    command:
    - cat
    tty: true
'''
            defaultContainer 'jnlp'
        }
    }

    options {
        skipDefaultCheckout()
    }
    
    stages {
        stage('Check Credential') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'github-pat-userpass', 
                                                    usernameVariable: 'GIT_USERNAME', 
                                                    passwordVariable: 'GIT_PASSWORD')]) {
                        echo "Credential 'github-pat-userpass' is available"
                        echo "Username: ${GIT_USERNAME}"
                        echo "Password starts with: ${GIT_PASSWORD.take(4)}..."
                    }
                }
            }
        }

        stage('Checkout') {
            steps {
                script {
                    def branch = env.CHANGE_BRANCH ?: env.BRANCH_NAME ?: 'main'
                    checkout([$class: 'GitSCM', 
                        branches: [[name: "*/${branch}"]],
                        extensions: [[$class: 'CloneOption', depth: 0, noTags: false, reference: '', shallow: false]], 
                        userRemoteConfigs: [[
                            url: 'https://github.com/svollmi1/k8s-vollminlab-cluster.git',
                            credentialsId: 'github-pat-userpass'
                        ]]
                    ])
                }
            }
        }

        stage('Get Changed Files') {
            steps {
                container('git') {
                    script {
                        withCredentials([usernamePassword(credentialsId: 'github-pat-userpass', 
                                                        usernameVariable: 'GIT_USERNAME', 
                                                        passwordVariable: 'GIT_PASSWORD')]) {
                            // First, check if we're in a git directory and print debug info
                            sh '''
                                pwd
                                ls -la
                                echo "Current directory: $(pwd)"
                            '''
                            
                            // Use the git repo already checked out by the previous stage
                            sh '''
                                cd ${WORKSPACE}
                                # Check if this is a git directory
                                if [ -d .git ] || git rev-parse --git-dir > /dev/null 2>&1; then
                                    echo "This is a git directory"
                                else
                                    echo "Not in a git directory, listing files:"
                                    ls -la
                                    exit 1
                                fi
                                
                                git config user.email "scottvollmin@gmail.com"
                                git config user.name "svollmi1"
                                git remote set-url origin https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/svollmi1/k8s-vollminlab-cluster.git
                                git fetch --all
                            '''
                            
                            if (env.CHANGE_TARGET) {
                                // This is a PR
                                sh "cd ${WORKSPACE} && git diff --name-only origin/${env.CHANGE_TARGET}...HEAD > changed_files.txt"
                            } else {
                                // This is a branch build - try to get changed files, but don't fail if it's the first commit
                                sh '''
                                    cd ${WORKSPACE}
                                    # Try to get changed files compared to previous commit
                                    if git rev-parse HEAD^1 > /dev/null 2>&1; then
                                        git diff --name-only HEAD^1 HEAD > changed_files.txt
                                    else
                                        # If this is the first commit, list all tracked files
                                        git ls-tree -r HEAD --name-only > changed_files.txt
                                    fi
                                '''
                            }
                            
                            // Read the changed files
                            env.CHANGED_FILES = sh(script: "cat ${WORKSPACE}/changed_files.txt", returnStdout: true).trim()
                            echo "Changed files: ${env.CHANGED_FILES}"
                        }
                    }
                }
            }
        }

        stage('Lint Changed YAML') {
            steps {
                container('yamllint') {
                    script {
                        sh '''
                        cat << EOF > .yamllint
extends: default

rules:
  line-length:
    max: 120
    level: warning
  document-start: disable
  truthy: disable
EOF
                        '''

                        env.CHANGED_FILES.split('\n').each { file ->
                            if (file.endsWith('.yaml') || file.endsWith('.yml')) {
                                echo "Linting file: ${file}"
                                sh "yamllint -c .yamllint ${file} || echo 'yamllint found issues but continuing'"
                            }
                        }
                    }
                }
            }
        }

        stage('Validate Changed Kubernetes Resources') {
            steps {
                container('kubectl') {
                    script {
                        env.CHANGED_FILES.split('\n').each { file ->
                            if (file.endsWith('.yaml') || file.endsWith('.yml')) {
                                sh "kubectl apply --dry-run=client -f ${file} -n ci-testing"
                            }
                        }
                    }
                }
            }
        }

        stage('Deploy Changed Resources to Test Namespace') {
            steps {
                container('kubectl') {
                    script {
                        env.CHANGED_FILES.split('\n').each { file ->
                            if (file.endsWith('.yaml') || file.endsWith('.yml')) {
                                sh "kubectl apply -f ${file} -n ci-testing"
                            }
                        }
                    }
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                container('kubectl') {
                    sh "kubectl get all -n ci-testing"
                    // Add more verification steps as needed
                }
            }
        }
    }

    post {
        always {
            container('kubectl') {
                script {
                    if (env.CHANGED_FILES) {
                        env.CHANGED_FILES.split('\n').each { file ->
                            if (file.endsWith('.yaml') || file.endsWith('.yml')) {
                                sh "kubectl delete -f ${file} -n ci-testing || true"
                            }
                        }
                    }
                }
            }
        }
    }
}
