pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
metadata:
  namespace: ci
spec:
  serviceAccountName: jenkins-operator-jenkins
  containers:
  - name: kubectl
    image: lachlanevenson/k8s-kubectl:v1.21.2
    command:
    - cat
    tty: true
  - name: yamllint
    image: cytopia/yamllint:latest
    command:
    - cat
    tty: true
'''
            defaultContainer 'jnlp'
        }
    }
    
    environment {
        GITHUB_TOKEN = credentials('github-pat')
        TEST_NAMESPACE = 'ci-testing'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', 
                    branches: [[name: '*/main']], 
                    userRemoteConfigs: [[
                        url: 'https://github.com/svollmi1/k8s-vollminlab-cluster.git',
                        credentialsId: 'github-pat'
                    ]]
                ])
            }
        } 
 
        stage('Get Changed Files') {
            steps {
                script {
                    if (env.CHANGE_ID) {
                        env.CHANGED_FILES = sh(script: "git diff --name-only origin/${env.CHANGE_TARGET} HEAD", returnStdout: true).trim()
                    } else {
                        env.CHANGED_FILES = sh(script: "git diff --name-only HEAD^1 HEAD", returnStdout: true).trim()
                    }
                    echo "Changed files: ${env.CHANGED_FILES}"
                }
            }
        }
        
        stage('Lint Changed YAML') {
            steps {
                container('yamllint') {
                    script {
                        env.CHANGED_FILES.split('\n').each { file ->
                            if (file.endsWith('.yaml') || file.endsWith('.yml')) {
                                sh "yamllint ${file}"
                            }
                        }
                    }
                }
            }
        }
        
        stage('Validate Changed Kubernetes Resources') {
            steps {
                container('kubectl') {
                    script {
                        env.CHANGED_FILES.split('\n').each { file ->
                            if (file.endsWith('.yaml') || file.endsWith('.yml')) {
                                sh "kubectl apply --dry-run=client -f ${file} -n ${TEST_NAMESPACE}"
                            }
                        }
                    }
                }
            }
        }
        
        stage('Deploy Changed Resources to Test Namespace') {
            steps {
                container('kubectl') {
                    script {
                        env.CHANGED_FILES.split('\n').each { file ->
                            if (file.endsWith('.yaml') || file.endsWith('.yml')) {
                                sh "kubectl apply -f ${file} -n ${TEST_NAMESPACE}"
                            }
                        }
                    }
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                container('kubectl') {
                    sh "kubectl get all -n ${TEST_NAMESPACE}"
                    // Add more verification steps as needed
                }
            }
        }
    }
    
    post {
        always {
            container('kubectl') {
                script {
                    if (env.CHANGED_FILES) {
                        env.CHANGED_FILES.split('\n').each { file ->
                            if (file.endsWith('.yaml') || file.endsWith('.yml')) {
                                sh "kubectl delete -f ${file} -n ${TEST_NAMESPACE}"
                            }
                        }
                    }
                }
            }
        }
    }
}

