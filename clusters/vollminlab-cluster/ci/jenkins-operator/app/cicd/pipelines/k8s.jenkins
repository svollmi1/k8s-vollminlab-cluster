pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
metadata:
  namespace: ci
spec:
  serviceAccountName: jenkins-operator-jenkins
  containers:
  - name: kubectl
    image: lachlanevenson/k8s-kubectl:v1.21.2
    command:
    - cat
    tty: true
  - name: yamllint
    image: cytopia/yamllint:latest
    command:
    - cat
    tty: true
  - name: git
    image: alpine/git:latest
    command:
    - cat
    tty: true
'''
            defaultContainer 'jnlp'
        }
    }

    options {
        skipDefaultCheckout()
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    def branch = env.CHANGE_BRANCH ?: env.BRANCH_NAME ?: 'main'
                    checkout([$class: 'GitSCM', 
                        branches: [[name: "*/${branch}"]],
                        extensions: [[$class: 'CloneOption', depth: 0, noTags: false, reference: '', shallow: false]], 
                        userRemoteConfigs: [[
                            url: 'https://github.com/svollmi1/k8s-vollminlab-cluster.git',
                            credentialsId: 'github-pat-userpass'
                        ]]
                    ])
                }
            }
        }

        stage('Get Changed Files') {
            steps {
                container('git') {
                    script {
                        withCredentials([usernamePassword(credentialsId: 'github-pat-userpass', 
                                                       usernameVariable: 'GIT_USERNAME', 
                                                       passwordVariable: 'GIT_PASSWORD')]) {
                            // Clone the repository to get an accurate git environment
                            sh '''
                                # Remove any existing git directory
                                rm -rf .git 2>/dev/null || true
                                
                                # Clone the repository
                                git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/svollmi1/k8s-vollminlab-cluster.git temp_repo
                                
                                # Move into the cloned directory
                                cd temp_repo
                                
                                # Setup git config
                                git config user.email "scottvollmin@gmail.com"
                                git config user.name "svollmi1"
                                
                                # Get changed files
                                if git rev-parse HEAD^1 >/dev/null 2>&1; then
                                    # Get files changed in the most recent commit
                                    git diff --name-only HEAD^1 HEAD > ../changed_files.txt
                                else
                                    # If this is the first commit, list all tracked files
                                    git ls-tree -r HEAD --name-only > ../changed_files.txt
                                fi
                                
                                # Clean up
                                cd ..
                                rm -rf temp_repo
                            '''
                            
                            // Read the changed files
                            env.CHANGED_FILES = sh(script: "cat changed_files.txt", returnStdout: true).trim()
                            echo "Changed files: ${env.CHANGED_FILES}"
                        }
                    }
                }
            }
        }

        stage('Lint Changed YAML') {
            steps {
                container('yamllint') {
                    script {
                        sh '''
                        cat << EOF > .yamllint
extends: default

rules:
  line-length:
    max: 120
    level: warning
  document-start: disable
  truthy: disable
EOF
                        '''

                        env.CHANGED_FILES.split('\n').each { file ->
                            if (file.endsWith('.yaml') || file.endsWith('.yml')) {
                                echo "Linting file: ${file}"
                                sh "yamllint -c .yamllint ${file} || echo 'yamllint found issues but continuing'"
                            }
                        }
                    }
                }
            }
        }

        stage('Validate Changed Kubernetes Resources') {
            steps {
                container('kubectl') {
                    script {
                        env.CHANGED_FILES.split('\n').each { file ->
                            if (file.endsWith('.yaml') || file.endsWith('.yml')) {
                                sh "kubectl apply --dry-run=client -f ${file} -n ci-testing"
                            }
                        }
                    }
                }
            }
        }

        stage('Deploy Changed Resources to Test Namespace') {
            steps {
                container('kubectl') {
                    script {
                        env.CHANGED_FILES.split('\n').each { file ->
                            if (file.endsWith('.yaml') || file.endsWith('.yml')) {
                                sh "kubectl apply -f ${file} -n ci-testing"
                            }
                        }
                    }
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                container('kubectl') {
                    sh "kubectl get all -n ci-testing"
                    // Add more verification steps as needed
                }
            }
        }
    }

    post {
        always {
            container('kubectl') {
                script {
                    if (env.CHANGED_FILES) {
                        env.CHANGED_FILES.split('\n').each { file ->
                            if (file.endsWith('.yaml') || file.endsWith('.yml')) {
                                sh "kubectl delete -f ${file} -n ci-testing || true"
                            }
                        }
                    }
                }
            }
        }
        success {
            script {
                echo "Pipeline completed successfully"
            }
        }
        failure {
            script {
                echo "Pipeline failed"
            }
        }
    }
}

