#!/usr/bin/env groovy

def label = "k8s-${UUID.randomUUID().toString()}"
def home = "/home/jenkins"
def workspace = "${home}/workspace"
def testNamespace = "ci-testing"

podTemplate(label: label,
        containers: [
                containerTemplate(name: 'alpine', image: 'alpine:3.11', ttyEnabled: true, command: 'cat'),
        ],
) {
    node(label) {
        stage('Parse and Validate YAML') {
            def files = sh(script: 'git diff --name-only HEAD~1 HEAD', returnStdout: true).trim().split("\n")
            files.each { file ->
                if (file.endsWith(".yaml") || file.endsWith(".yml")) {
                    echo "Validating ${file}"
                    sh "yamllint ${file}" // Validate YAML syntax
                    sh "kubectl apply --dry-run=client -f ${file} --namespace=${testNamespace}" // Dry run
                }
            }
        }

        stage('Apply Resources') {
            def files = sh(script: 'git diff --name-only HEAD~1 HEAD', returnStdout: true).trim().split("\n")
            files.each { file ->
                if (file.endsWith(".yaml") || file.endsWith(".yml")) {
                    echo "Applying ${file}"
                    sh "kubectl apply -f ${file} --namespace=${testNamespace}"
                }
            }
        }

        stage('Cleanup') {
            def files = sh(script: 'git diff --name-only HEAD~1 HEAD', returnStdout: true).trim().split("\n")
            files.each { file ->
                if (file.endsWith(".yaml") || file.endsWith(".yml")) {
                    echo "Cleaning up ${file}"
                    sh "kubectl delete -f ${file} --namespace=${testNamespace}"
                }
            }
        }
    }
}
