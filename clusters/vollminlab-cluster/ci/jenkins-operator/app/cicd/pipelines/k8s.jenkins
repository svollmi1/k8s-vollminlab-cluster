pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
metadata:
  namespace: ci
spec:
  serviceAccountName: jenkins-operator-jenkins
  containers:
  - name: kubectl
    image: lachlanevenson/k8s-kubectl:v1.21.2
    command:
    - cat
    tty: true
  - name: yamllint
    image: cytopia/yamllint:latest
    command:
    - cat
    tty: true
  - name: git
    image: alpine/git:latest
    command:
    - cat
    tty: true
'''
            defaultContainer 'jnlp'
        }
    }

    options {
        skipDefaultCheckout()
    }
    
    stages {
        stage('Check Credential') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'github-pat', variable: 'TOKEN')]) {
                        if (TOKEN) {
                            echo "Credential 'github-pat' is available"
                        } else {
                            error "Credential 'github-pat' is not available"
                        }
                    }
                }
            }
        }

        stage('Checkout') {
            steps {
                script {
                    checkout([$class: 'GitSCM', 
                        branches: [[name: '*/main']], 
                        extensions: [[$class: 'CloneOption', depth: 0, noTags: false, reference: '', shallow: false]], 
                        userRemoteConfigs: [[
                            url: 'https://github.com/svollmi1/k8s-vollminlab-cluster.git',
                            credentialsId: 'github-pat'
                        ]]
                    ])
                }
            }
        }

        stage('Get Changed Files') {
            steps {
                container('git') {
                    script {
                        withCredentials([string(credentialsId: 'github-pat', variable: 'GITHUB_TOKEN')]) {
                            sh """
                                git config --local user.email "scottvollmin@gmail.com"
                                git config --local user.name "svollmi1"
                                git config --local credential.helper '!f() { echo username=svollmi1; echo password=$GITHUB_TOKEN; }; f'
                                git fetch --all
                                CHANGED_FILES=\$(git diff --name-only HEAD^1 HEAD || git ls-files)
                                echo "\$CHANGED_FILES" > changed_files.txt
                            """
                        }
                        env.CHANGED_FILES = readFile('changed_files.txt').trim()
                        echo "Changed files: ${env.CHANGED_FILES}"
                    }
                }
            }
        }

        stage('Lint Changed YAML') {
            steps {
                container('yamllint') {
                    script {
                        sh '''
                        cat << EOF > .yamllint
extends: default

rules:
  line-length:
    max: 120
    level: warning
  document-start: disable
  truthy: disable
EOF
                        '''

                        env.CHANGED_FILES.split('\n').each { file ->
                            if (file.endsWith('.yaml') || file.endsWith('.yml')) {
                                echo "Linting file: ${file}"
                                sh "yamllint -c .yamllint ${file} || echo 'yamllint found issues but continuing'"
                            }
                        }
                    }
                }
            }
        }

        stage('Validate Changed Kubernetes Resources') {
            steps {
                container('kubectl') {
                    script {
                        env.CHANGED_FILES.split('\n').each { file ->
                            if (file.endsWith('.yaml') || file.endsWith('.yml')) {
                                sh "kubectl apply --dry-run=client -f ${file} -n ci-testing"
                            }
                        }
                    }
                }
            }
        }

        stage('Deploy Changed Resources to Test Namespace') {
            steps {
                container('kubectl') {
                    script {
                        env.CHANGED_FILES.split('\n').each { file ->
                            if (file.endsWith('.yaml') || file.endsWith('.yml')) {
                                sh "kubectl apply -f ${file} -n ci-testing"
                            }
                        }
                    }
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                container('kubectl') {
                    sh "kubectl get all -n ci-testing"
                    // Add more verification steps as needed
                }
            }
        }
    }

    post {
        always {
            container('kubectl') {
                script {
                    if (env.CHANGED_FILES) {
                        env.CHANGED_FILES.split('\n').each { file ->
                            if (file.endsWith('.yaml') || file.endsWith('.yml')) {
                                sh "kubectl delete -f ${file} -n ci-testing || true"
                            }
                        }
                    }
                }
            }
        }
    }
}

